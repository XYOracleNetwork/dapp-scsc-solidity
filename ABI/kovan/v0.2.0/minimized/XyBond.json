{
  "contractName": "XyBond",
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addGovernor",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bonds",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "erc20",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ownerBonds",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "governablePeriod",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "bond",
      "outputs": [
        {
          "name": "value",
          "type": "uint256"
        },
        {
          "name": "expirationSec",
          "type": "uint256"
        },
        {
          "name": "creationSec",
          "type": "uint256"
        },
        {
          "name": "allocated",
          "type": "uint256"
        },
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "interest",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "bondIndex",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceGovernor",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isGovernor",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "bondId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "BondDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "bondId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BondWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "bondId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BondStake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "bondId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "stakingId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BondUnstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "account",
          "type": "address"
        }
      ],
      "name": "GovernorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "account",
          "type": "address"
        }
      ],
      "name": "GovernorRemoved",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_token",
          "type": "address"
        },
        {
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "name": "_governablePeriod",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newPeriod",
          "type": "uint256"
        }
      ],
      "name": "setGovernablePeriod",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "xyoAmount",
          "type": "uint256"
        },
        {
          "name": "expirationDate",
          "type": "uint256"
        }
      ],
      "name": "createBond",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_spender",
          "type": "address"
        },
        {
          "name": "_value",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "receiveApproval",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "bondId",
          "type": "bytes32"
        },
        {
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawTo",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "bondId",
          "type": "bytes32"
        },
        {
          "name": "beneficiary",
          "type": "address"
        },
        {
          "name": "stakees",
          "type": "address[]"
        },
        {
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "stake",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "bondId",
          "type": "bytes32"
        },
        {
          "name": "beneficiary",
          "type": "address"
        },
        {
          "name": "stakees",
          "type": "address[]"
        },
        {
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "sendEthAndStake",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "bondId",
          "type": "bytes32"
        },
        {
          "name": "stakingId",
          "type": "bytes32"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "bondId",
          "type": "bytes32"
        }
      ],
      "name": "isExpired",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "numBonds",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "numOwnerBonds",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": "",
  "deployedBytecode": "",
  "sourceMap": "253:9070:14:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;253:9070:14;;;;;;;",
  "deployedSourceMap": "253:9070:14:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1705:292;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1705:292:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;1705:292:14;;;;;;;;;;;;;;;;;:::i;:::-;;4718:677;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4718:677:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4718:677:14;;;;;;-1:-1:-1;;;;;4718:677:14;;:::i;9208:113::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9208:113:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;9208:113:14;-1:-1:-1;;;;;9208:113:14;;:::i;:::-;;;;;;;;;;;;;;;;526:90:9;;8:9:-1;5:2;;;30:1;27;20:12;5:2;526:90:9;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;526:90:9;-1:-1:-1;;;;;526:90:9;;:::i;395:22:14:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;395:22:14;;;:::i;:::-;;;;-1:-1:-1;;;;;395:22:14;;;;;;;;;;;;;;8997:83;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8997:83:14;;;:::i;1414:22::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1414:22:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1414:22:14;;:::i;8396:149::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8396:149:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;8396:149:14;;:::i;:::-;;;;;;;;;;;;;;;;;;5691:914;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5691:914:14;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;5691:914:14;;;-1:-1:-1;;;;;5691:914:14;;;;;;;;;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;5691:914:14;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;5691:914:14;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;5691:914:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;5691:914:14;;;;;;;;-1:-1:-1;5691:914:14;;-1:-1:-1;;21:11;5:28;;2:2;;;46:1;43;36:12;2:2;5691:914:14;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;5691:914:14;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;5691:914:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;5691:914:14;;-1:-1:-1;5691:914:14;;-1:-1:-1;;;;;5691:914:14:i;7515:767::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7515:767:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;7515:767:14;;;;;;;:::i;336:20::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;336:20:14;;;:::i;1360:48::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1360:48:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;1360:48:14;;;;;;;;:::i;2533:179::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2533:179:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2533:179:14;;;;;;;:::i;454:28::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;454:28:14;;;:::i;1269:37::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1269:37:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1269:37:14;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1269:37:14;;;;;;;;;;;;;;;;;;;;2960:347;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2960:347:14;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;;;;;2960:347:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;2960:347:14;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;2960:347:14;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;-1:-1;2960:347:14;;-1:-1:-1;2960:347:14;-1:-1:-1;2960:347:14;:::i;2127:198::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2127:198:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2127:198:14;;:::i;1312:42::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1312:42:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1312:42:14;;:::i;7024:300::-;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;7024:300:14;;;-1:-1:-1;;;;;7024:300:14;;;;;;;;;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;7024:300:14;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;7024:300:14;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;7024:300:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;7024:300:14;;;;;;;;-1:-1:-1;7024:300:14;;-1:-1:-1;;21:11;5:28;;2:2;;;46:1;43;36:12;2:2;7024:300:14;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;7024:300:14;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;7024:300:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;7024:300:14;;-1:-1:-1;7024:300:14;;-1:-1:-1;;;;;7024:300:14:i;620:73:9:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;620:73:9;;;:::i;418:104::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;418:104:9;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;418:104:9;-1:-1:-1;;;;;418:104:9;;:::i;1705:292:14:-;1024:12:29;;;;;;;;:31;;;1040:15;:13;:15::i;:::-;1024:47;;;-1:-1:-1;1060:11:29;;;;1059:12;1024:47;1016:106;;;;;;-1:-1:-1;;;;;1016:106:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1152:12;;;;-1:-1:-1;;1170:19:29;;;;-1:-1:-1;;1195:18:29;;;;;;1872:5:14;:14;;-1:-1:-1;;1872:14:14;;;-1:-1:-1;;;;;1872:14:14;;;;;;;;;;1896:7;:26;;;;;;;;;;;;;;1932:16;:36;;;1152:12:29;;;1978::14;:10;:12::i;:::-;1228::29;:30;;;;;;;-1:-1:-1;;1228:30:29;;;;;;;;;-1:-1:-1;;;1705:292:14:o;4718:677::-;4797:15;4815:12;;;:4;:12;;;;;4859:8;;4815:12;;4886:18;;4877:49;;;;;-1:-1:-1;;;;;4877:49:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;4947:1;4936:12;;5010:8;;;;5037:12;;;;-1:-1:-1;;;;;5010:8:14;;;4996:10;:22;;5037:17;5028:64;;;;-1:-1:-1;;;;;5028:64:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5111:7;:26;;;-1:-1:-1;5122:15:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5122:15:14;;;;;;;;;;;;;;;;;:11;:15::i;:::-;5102:72;;;;;;;-1:-1:-1;;;;;5102:72:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5188:7;5184:94;;;5226:16;;;;5220:3;:22;5211:56;;;;;-1:-1:-1;;;;;5211:56:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;5306:5;;5287:45;;-1:-1:-1;;;;;5306:5:14;5313:2;5317:14;5287:18;:45::i;:::-;5348:40;;;;;;-1:-1:-1;;;;;5348:40:14;;;;;;;;;;;;;;;;;;;;;;;4718:677;;;;;:::o;9208:113::-;-1:-1:-1;;;;;9290:17:14;9267:4;9290:17;;;:10;:17;;;;;:24;;9208:113::o;526:90:9:-;355:22;366:10;355;:22::i;:::-;347:55;;;;;;;-1:-1:-1;;;;;347:55:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;590:21;603:7;590:12;:21::i;:::-;526:90;:::o;395:22:14:-;;;-1:-1:-1;;;;;395:22:14;;:::o;8997:83::-;9061:5;:12;8997:83;:::o;1414:22::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1414:22:14;:::o;8396:149::-;8479:4;8506:12;;;:4;:12;;;;;:26;;;8535:3;-1:-1:-1;;8396:149:14:o;5691:914::-;5830:15;5848:12;;;:4;:12;;;;;5899:8;;;;-1:-1:-1;;;;;5899:8:14;5885:10;:22;;;5926:26;;-1:-1:-1;5937:15:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5937:15:14;;;;;;;;;;;;;;;;;:11;:15::i;:::-;5917:69;;;;;;;-1:-1:-1;;;;;5917:69:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;6005:10;;6029:96;6050:7;:14;6046:1;:18;6029:96;;;6093:21;6103:7;6111:1;6103:10;;;;;;;;;;;;;;;;;;;6093:5;;:21;:9;:21;:::i;:::-;6085:29;-1:-1:-1;6066:3:14;;6029:96;;;-1:-1:-1;6149:12:14;;;;:23;;6166:5;6149:23;:16;:23;:::i;:::-;6134:12;;;:38;;;6208:8;;-1:-1:-1;6192:24:14;6183:63;;;;;-1:-1:-1;;;;;6183:63:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;6295:20;6329:6;6337:11;6350:7;6359;6318:49;;;;;;;;;;;-1:-1:-1;;;;;6318:49:14;-1:-1:-1;;;;;6318:49:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;6318:49:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;6318:49:14;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;6318::14;;;6295:72;;6377:23;6414:1;6417:7;6403:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;6403:22:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6403:22:14;;;-1:-1:-1;;26:21;;;22:32;6:49;;6403:22:14;;;;6484:5;;6506:7;;6474:59;;;-1:-1:-1;;;;;6506:7:14;;;6474:59;;;;;;;;;;;;;;;;;;;;;;;;;;;6403:22;;-1:-1:-1;6484:5:14;;;;;-1:-1:-1;6474:31:14;;-1:-1:-1;6506:7:14;-1:-1:-1;6515:5:14;;-1:-1:-1;6403:22:14;;6474:59;;;;;;;49:4:-1;6474:59:14;;;;;;6484:5;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;6474:59:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6474:59:14;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6474:59:14;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;6549:49:14;;;;;;6567:10;6474:59;6549:49;;;-1:-1:-1;;;;;6549:49:14;;;;;;;;;;;;;;;;;;;;;;;5691:914;;;;;;;;;:::o;7515:767::-;7641:7;;7622:50;;;;;;;;;;;;;;7600:19;;-1:-1:-1;;;;;7641:7:14;;7622:39;;:50;;;;;;;;;;;;;;7641:7;7622:50;;;5:2:-1;;;;30:1;27;20:12;5:2;7622:50:14;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7622:50:14;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;7622:50:14;;-1:-1:-1;7690:21:14;;;7682:58;;;;;-1:-1:-1;;;;;7682:58:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;7792:7;;7773:48;;;;;;;;;;;;;;7752:11;;-1:-1:-1;;;;;7792:7:14;;7773:37;;:48;;;;;;;;;;;;;;7792:7;7773:48;;;5:2:-1;;;;30:1;27;20:12;5:2;7773:48:14;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7773:48:14;;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;7773:48:14;7831:15;7849:12;;;:4;7773:48;7849:12;7773:48;7849:12;;7894:8;;;;7773:48;;-1:-1:-1;7849:12:14;-1:-1:-1;;;;;7894:8:14;7880:10;:22;;:41;;-1:-1:-1;7906:15:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7906:15:14;;;;;;;;;;;;;;;;;:11;:15::i;:::-;7871:86;;;;;;;-1:-1:-1;;;;;7871:86:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;7984:12;;;;:22;-1:-1:-1;7984:22:14;7976:70;;;;-1:-1:-1;;;;;7976:70:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8071:12;;;;:24;;8088:6;8071:24;:16;:24;:::i;:::-;8056:12;;;:39;8168:7;;8149:60;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;8168:7:14;;;;8149:41;;:60;;;;;8168:7;;8149:60;;;;;;;;8168:7;;8149:60;;;5:2:-1;;;;30:1;27;20:12;5:2;8149:60:14;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;8225:50:14;;;;;;8245:10;8225:50;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8225:50:14;;;;;;;-1:-1:-1;8225:50:14;7515:767;;;;;:::o;336:20::-;;;-1:-1:-1;;;;;336:20:14;;:::o;1360:48::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2533:179::-;2625:7;2655:50;2667:10;2679:9;2690:14;2655:11;:50::i;:::-;2648:57;2533:179;-1:-1:-1;;;2533:179:14:o;454:28::-;;;;:::o;1269:37::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1269:37:14;;;;;;;;;:::o;2960:347::-;3151:5;;-1:-1:-1;;;;;3151:5:14;3137:10;:19;3128:60;;;;;-1:-1:-1;;;;;3128:60:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;3199:15;3229:10;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3218:30:14;;-1:-1:-1;3259:41:14;3271:8;3281:6;3218:30;3259:11;:41::i;:::-;;2960:347;;;;;;:::o;2127:198::-;355:22:9;366:10;355;:22::i;:::-;347:55;;;;;;;-1:-1:-1;;;;;347:55:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;2246:8:14;2234:20;;2225:55;;;;;-1:-1:-1;;;;;2225:55:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;2290:16;:28;2127:198::o;1312:42::-;;;;;;;;;;;;;:::o;7024:300::-;7205:1;7193:9;:13;7189:75;;;7222:31;;-1:-1:-1;;;;;7222:20:14;;;7243:9;7222:31;;;;;;;;;7243:9;7222:20;:31;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7222:31:14;7189:75;7273:44;7279:6;7287:11;7300:7;7309;7273:5;:44::i;:::-;7024:300;;;;:::o;620:73:9:-;661:27;677:10;661:15;:27::i;:::-;620:73::o;418:104::-;476:4;495:22;476:4;509:7;495:22;:13;:22;:::i;:::-;488:29;418:104;-1:-1:-1;;418:104:9:o;1349:467:29:-;1782:7;1770:20;1804:7;1349:467;:::o;245:68:9:-;284:24;297:10;284:12;:24::i;8677:252:14:-;8761:4;8782:10;8795:22;8806:10;8795;:22::i;:::-;8782:35;;8827:14;8851:36;8870:16;;8851:2;:14;;;:18;;:36;;;;:::i;:::-;8844:3;:43;;8827:60;;8904:5;:18;;;;;8913:9;8904:18;8897:25;8677:252;-1:-1:-1;;;;8677:252:14:o;928:162:25:-;1015:5;-1:-1:-1;;;;;1002:28:25;;1031:2;1035:6;1002:40;;;;;;;;;;;;;-1:-1:-1;;;;;1002:40:25;-1:-1:-1;;;;;1002:40:25;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1002:40:25;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1002:40:25;;;;1054:14;:12;:14::i;:::-;1046:40;;;;;;;-1:-1:-1;;;;;1046:40:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;928:162;;;:::o;697:114:9:-;751:22;:9;765:7;751:22;:13;:22;:::i;:::-;784;;-1:-1:-1;;;;;784:22:9;;;;;;;;697:114;:::o;1345:142:30:-;1430:7;;;1454;;;;1447:15;;;1149:126;1209:7;1235:8;;;;1228:16;;;;-1:-1:-1;1261:7:30;;;1149:126::o;3509:878:14:-;3615:7;3664:18;:3;3672:9;3664:18;:7;:18;:::i;:::-;3647:35;;3638:82;;;;-1:-1:-1;;;;;3638:82:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3756:15;:3;3764:6;3756:15;:7;:15;:::i;:::-;3739:32;;3730:90;;;;-1:-1:-1;;;;;3730:90:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3857:55;;;-1:-1:-1;;;;;3857:55:14;;;;;;;;;;;;;;;;;;;;;;3899:12;3857:55;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;3857:55:14;;;;;;;3847:66;;;;;3923:14;;:::i;:::-;-1:-1:-1;3940:140:14;;;;;;;;;;;;;;;;;;4009:15;3940:140;;;;;;-1:-1:-1;3940:140:14;;;;;;-1:-1:-1;;;;;3940:140:14;;;;;;;;;;;;;;;4110:5;:12;;4090:17;;;:9;:17;;;;;:32;4132:4;:12;;;;;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3940:140;4132:17;;;-1:-1:-1;;4132:17:14;;;-1:-1:-1;;4132:17:14;;;;;;;;;;;;;;;4159:14;;;:10;:14;;;;;27:10:-1;;23:18;;;45:23;;4159:27:14;;;;;;;;;;;;27:10:-1;;23:18;;;45:23;;4196:18:14;;;;;;;;;;;4256:5;;3940:140;;4233:59;;4256:5;4053:2;4275:4;3958:9;4233:22;:59::i;:::-;4307:50;;;;;;-1:-1:-1;;;;;4307:50:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4374:6:14;3509:878;-1:-1:-1;;;;3509:878:14:o;815:122:9:-;872:25;:9;889:7;872:25;:16;:25;:::i;:::-;908:24;;-1:-1:-1;;;;;908:24:9;;;;;;;;815:122;:::o;732:166:10:-;816:4;-1:-1:-1;;;;;838:21:10;;;;830:30;;;;;;-1:-1:-1;;;;;;873:20:10;:11;:20;;;;;;;;;;;;;;;732:166::o;339:586:25:-;391:4;;512:14;571:36;;;;660:4;655:163;;;;505:385;;571:36;601:1;586:16;;571:36;;655:163;736:4;731:3;726;711:30;809:3;803:10;788:25;;505:385;-1:-1:-1;905:16:25;;;-1:-1:-1;339:586:25;:::o;251:167:10:-;-1:-1:-1;;;;;323:21:10;;;;315:30;;;;;;360:18;364:4;370:7;360:3;:18::i;:::-;359:19;351:28;;;;;;-1:-1:-1;;;;;386:20:10;:11;:20;;;;;;;;;;;:27;;-1:-1:-1;;386:27:10;409:4;386:27;;;251:167::o;1093:194:25:-;1185:50;;;;;;-1:-1:-1;;;;;1185:50:25;;;;;;;;;;;;;;;;;;;;;;:32;;;;;;:50;;;;;-1:-1:-1;;1185:50:25;;;;;;;;-1:-1:-1;1185:32:25;:50;;;5:2:-1;;;;30:1;27;20:12;5:2;1185:50:25;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1185:50:25;;;;1247:14;:12;:14::i;:::-;1239:44;;;;;;;-1:-1:-1;;;;;1239:44:25;;;;;;;;;;;;;;;;;;;;;;;;;;;484:170:10;-1:-1:-1;;;;;559:21:10;;;;551:30;;;;;;595:18;599:4;605:7;595:3;:18::i;:::-;587:27;;;;;;;;-1:-1:-1;;;;;621:20:10;644:5;621:20;;;;;;;;;;;:28;;-1:-1:-1;;621:28:10;;;484:170::o;253:9070:14:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;253:9070:14;;;;;;;;;;;;:::o",
  "source": "pragma solidity >=0.5.0 <0.6.0;\n\nimport \"./XyStakingConsensus.sol\";\nimport \"../utils/SafeMath.sol\";\nimport \"../token/ERC20/SafeERC20.sol\";\nimport \"../token/ERC20/IXYOERC20.sol\";\nimport \"../utils/Initializable.sol\";\nimport \"../access/GovernorRole.sol\";\n\ncontract XyBond is GovernorRole, Initializable {\n    using SafeMath for uint;\n\n    address public erc20;         // the token for staking\n    address public staking;       // node-staking contract\n    uint public governablePeriod; // seconds after bond creation it's governable\n\n    event BondDeposit(bytes32 bondId, address beneficiary, uint amount, uint expiration);\n    event BondWithdraw(bytes32 bondId, address beneficiary, uint amount);\n    event BondStake(bytes32 bondId, address sender, address beneficiary, uint amount);\n    event BondUnstake(bytes32 bondId, address sender, bytes32 stakingId, uint amount);\n\n    struct Bond {\n        uint value;             // amount staked\n        uint expirationSec;     // expiration date in seconds\n        uint creationSec;       // creation date in seconds\n        uint allocated;         // number allocated to node stake\n        address owner;          // who owns the stake\n        uint8 interest;         // possibly add interest or relationship here\n    }\n\n    mapping (bytes32 => Bond) public bond;\n    mapping (bytes32 => uint) public bondIndex;\n    mapping (address => bytes32[]) public ownerBonds;\n    bytes32[] public bonds;\n\n    /**\n        initializes upgradeable contract\n        @param _token the token to stake\n        @param _stakingContract the contract used for staking \n        @param _governablePeriod the period a governor can revoke bonded stake (chargeback avoidance)\n    */\n    function initialize (\n        address _token,\n        address _stakingContract,\n        uint _governablePeriod\n    )\n        initializer \n        public\n    {\n        erc20 = _token;\n        staking = _stakingContract;\n        governablePeriod = _governablePeriod;\n        super.init();\n    }\n\n    /**\n        Update period a bond is governable\n        @param newPeriod the new static period we allow to revoke\n    */\n    function setGovernablePeriod(uint newPeriod) \n        public \n        onlyGovernor \n    {\n        require (newPeriod < 31536000, \"Max 1 year governable\");\n        governablePeriod = newPeriod;\n    }\n\n    /**\n        Create a bonded (network stake)\n        Sender must approve before bond can be created\n        @param xyoAmount amount to bond\n        @param expirationDate date the bond expires\n    */\n    function createBond (uint xyoAmount, uint expirationDate) \n        public \n        returns (bytes32)\n    {\n        return _createBond(msg.sender, xyoAmount, expirationDate);\n    }\n\n    /**\n        Called from erc20 token that allows approval and calling function in a single call\n        @param _spender who approved the token\n        @param _value amount approved\n        @param _extraData contains expiration date\n    */\n    function receiveApproval(\n        address _spender, \n        uint256 _value, \n        address,\n        bytes calldata _extraData\n    ) \n        external \n    {\n        require (msg.sender == erc20, \"Call from the current token\");\n        (uint expireDate) = abi.decode(_extraData, (uint));\n\n        _createBond(_spender, _value, expireDate);\n    }\n\n    /**\n        Creates a bond to 'to' for 'xyoAmount' until 'expirationDate'\n        @param to who receives bond\n        @param xyoAmount how much\n        @param expirationDate until when\n    */\n    function _createBond (address to, uint xyoAmount, uint expirationDate) \n        private \n        returns (bytes32)\n    {\n        require (expirationDate < now.add(946080000), \"Expiry must be less than 30 years\");\n        require (expirationDate > now.add(172800), \"Expiry must be at least 2 days in the future\");\n        bytes32 bondId = keccak256(abi.encode(to, xyoAmount, expirationDate, block.number));\n        Bond memory ns = Bond(\n            xyoAmount,\n            expirationDate,\n            block.timestamp,\n            0,\n            to,\n            0\n        );\n        bondIndex[bondId] = bonds.length;\n        bond[bondId] = ns;\n        ownerBonds[to].push(bondId);\n        bonds.push(bondId);\n        \n        SafeERC20.transferFrom(erc20, to, address(this), xyoAmount);\n        emit BondDeposit(bondId, to, xyoAmount, expirationDate);\n        return bondId;\n    }\n\n    /**\n        Withdraws an expired or governed bond's value to 'to'\n        Prerequisites: Bond must be entirely unstaked. Sender is owner or bond is governable.  Bond cannot be already emptied\n        @param bondId the bond id\n        @param to who receives the withdrawl\n        sender - owner of bond or governor\n    */\n    function withdrawTo (bytes32 bondId, address to) \n        public\n    {\n        Bond storage bs = bond[bondId];\n        uint withdrawAmount = bs.value;\n        require (withdrawAmount > 0, \"Bond has no value\");\n        bs.value = 0; // erase value of bond\n        bool isOwner = msg.sender == bs.owner;\n        require (bs.allocated == 0, \"Bond must have no allocated stake\");\n        require (isOwner || _governable(bs), \"owner or governable can withdraw\");\n        if (isOwner) {\n            require (now > bs.expirationSec, \"Bond is still active\");\n        }\n        SafeERC20.transfer(erc20, to, withdrawAmount);\n\n        emit BondWithdraw(bondId, to, withdrawAmount);\n    }\n\n    /**\n        Add node stakes associated from this bond.\n        @param bondId Id of the bond to use for node stake\n        @param beneficiary who will own the stakeid\n        @param stakees which stakees to create stake for\n        @param amounts which amounts to use for stakees\n    */\n    function stake (bytes32 bondId, address payable beneficiary, address[] memory stakees, uint[] memory amounts)\n        public\n    {\n        Bond storage bs = bond[bondId];\n        bool isOwner = msg.sender == bs.owner;\n        require (isOwner || _governable(bs), \"owner or governable can stake\");\n        \n        uint total = 0;\n        for (uint i = 0; i < amounts.length; i++) {\n            total = total.add(amounts[i]);\n        }\n        bs.allocated = bs.allocated.add(total);\n\n        require (bs.allocated <= bs.value, \"Insufficient bond balance\");\n\n        // stake stakees with amounts\n        bytes memory encoded = abi.encode(bondId, beneficiary, stakees, amounts);\n        bytes memory methodData = abi.encode(4, encoded);\n        \n        // stake bonded nodes\n        IXYOERC20(erc20).approveAndCall(staking, total, methodData);\n\n        emit BondStake(bondId, msg.sender, beneficiary, total);\n    }\n\n     /**\n        Helper for onboarding user with ETH and adding node stakes associated to their bond.\n        @param bondId Id of the bond to use for node stake\n        @param beneficiary who will own the stakeid\n        @param stakees which stakees to create stake for\n        @param amounts which amounts to use for stakees\n        msg.value send with some value to transfer eth to user in a single call\n    */\n    function sendEthAndStake(bytes32 bondId, address payable beneficiary, address[] memory stakees, uint[] memory amounts) \n        public\n        payable\n    {\n        if (msg.value > 0) {\n            beneficiary.transfer(msg.value);\n        }\n        stake(bondId, beneficiary, stakees, amounts);\n    }\n\n    /**\n        Called by owner or governable to unstake bonded node-stake\n        @param bondId The bond to unstake\n        @param stakingId the id of the associated node-stake\n    */\n    function unstake (bytes32 bondId, bytes32 stakingId) \n        public  \n    {\n        bytes32 checkBondId = XyStakingConsensus(staking).bondedStake(stakingId);\n        require(checkBondId == bondId, \"Stake needs to be bonded\");\n\n        (uint amount,,,,,,) = XyStakingConsensus(staking).stakeData(stakingId);\n        Bond storage bs = bond[bondId];\n        require (msg.sender == bs.owner || _governable(bs), \"owner or governable can unstake\");\n        \n        require(bs.allocated >= amount, \"Cannot unstake over bond allocation\");\n        bs.allocated = bs.allocated.sub(amount);\n\n        // will fail if already withdrew  \n        XyStakingConsensus(staking).unstakeBonded(bondId, stakingId);\n\n        emit BondUnstake(bondId, msg.sender, stakingId, amount);\n    }\n\n    /**\n        Helper to know if bond is expired\n        @param bondId which bond are we looking at\n    */\n    function isExpired(bytes32 bondId) \n        public \n        view \n        returns (bool)\n    {\n        return bond[bondId].expirationSec < now;\n    }\n\n    /** \n        True if the governable period has not elapsed since the bond creation\n        @param bs bond to check\n    */\n    function _governable(Bond memory bs) \n        private\n        view\n        returns (bool) \n    {\n        bool isGov = isGovernor(msg.sender);\n        bool govActive = now <= bs.creationSec.add(governablePeriod);\n        return isGov && govActive;\n    }\n\n\n    /** \n        Returns total count of bonds created\n    */\n    function numBonds() public view returns (uint) {\n        return bonds.length;\n    }\n\n    /** \n        Returns the total count of bonds created by owner\n        @param owner count bonds of this hodler\n    */\n    function numOwnerBonds(address owner) public view returns (uint) {\n        return ownerBonds[owner].length;\n    }\n}",
  "compiler": {
    "name": "solc",
    "version": "0.5.4+commit.9549d8ff.Emscripten.clang"
  },
  "networks": {
    "42": {
      "links": {},
      "events": {},
      "address": "0xC055C3dF365026928903dDdEd2B365870F30CBa5",
      "updated_at": 1556322805727,
      "transactionHash": "0x9d014b15aecfb5c8a9a667e5e3151db7685ad2e27d44ef02b340a666d4c47bc9"
    }
  },
  "schemaVersion": "3.0.8",
  "updatedAt": "2019-04-30T19:39:51.874Z",
  "devdoc": {
    "methods": {
      "createBond(uint256,uint256)": {
        "params": {
          "expirationDate": "date the bond expires",
          "xyoAmount": "amount to bond"
        }
      },
      "initialize(address,address,uint256)": {
        "params": {
          "_governablePeriod": "the period a governor can revoke bonded stake (chargeback avoidance)",
          "_stakingContract": "the contract used for staking ",
          "_token": "the token to stake"
        }
      },
      "isExpired(bytes32)": {
        "params": {
          "bondId": "which bond are we looking at"
        }
      },
      "numOwnerBonds(address)": {
        "params": {
          "owner": "count bonds of this hodler"
        }
      },
      "receiveApproval(address,uint256,address,bytes)": {
        "params": {
          "_extraData": "contains expiration date",
          "_spender": "who approved the token",
          "_value": "amount approved"
        }
      },
      "sendEthAndStake(bytes32,address,address[],uint256[])": {
        "params": {
          "amounts": "which amounts to use for stakees msg.value send with some value to transfer eth to user in a single call",
          "beneficiary": "who will own the stakeid",
          "bondId": "Id of the bond to use for node stake",
          "stakees": "which stakees to create stake for"
        }
      },
      "setGovernablePeriod(uint256)": {
        "params": {
          "newPeriod": "the new static period we allow to revoke"
        }
      },
      "stake(bytes32,address,address[],uint256[])": {
        "params": {
          "amounts": "which amounts to use for stakees",
          "beneficiary": "who will own the stakeid",
          "bondId": "Id of the bond to use for node stake",
          "stakees": "which stakees to create stake for"
        }
      },
      "unstake(bytes32,bytes32)": {
        "params": {
          "bondId": "The bond to unstake",
          "stakingId": "the id of the associated node-stake"
        }
      },
      "withdrawTo(bytes32,address)": {
        "params": {
          "bondId": "the bond id",
          "to": "who receives the withdrawl sender - owner of bond or governor"
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "createBond(uint256,uint256)": {
        "notice": "Create a bonded (network stake) Sender must approve before bond can be created"
      },
      "initialize(address,address,uint256)": {
        "notice": "initializes upgradeable contract"
      },
      "isExpired(bytes32)": {
        "notice": "Helper to know if bond is expired"
      },
      "numBonds()": {
        "notice": "Returns total count of bonds created"
      },
      "numOwnerBonds(address)": {
        "notice": "Returns the total count of bonds created by owner"
      },
      "receiveApproval(address,uint256,address,bytes)": {
        "notice": "Called from erc20 token that allows approval and calling function in a single call"
      },
      "sendEthAndStake(bytes32,address,address[],uint256[])": {
        "notice": "Helper for onboarding user with ETH and adding node stakes associated to their bond."
      },
      "setGovernablePeriod(uint256)": {
        "notice": "Update period a bond is governable"
      },
      "stake(bytes32,address,address[],uint256[])": {
        "notice": "Add node stakes associated from this bond."
      },
      "unstake(bytes32,bytes32)": {
        "notice": "Called by owner or governable to unstake bonded node-stake"
      },
      "withdrawTo(bytes32,address)": {
        "notice": "Withdraws an expired or governed bond's value to 'to' Prerequisites: Bond must be entirely unstaked. Sender is owner or bond is governable.  Bond cannot be already emptied"
      }
    }
  }
}