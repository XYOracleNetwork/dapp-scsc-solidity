{
  "contractName": "PLCRVoting",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "INITIAL_POLL_NONCE",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "voteTokenBalance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pollMap",
      "outputs": [
        {
          "name": "commitEndDate",
          "type": "uint256"
        },
        {
          "name": "revealEndDate",
          "type": "uint256"
        },
        {
          "name": "voteQuorum",
          "type": "uint256"
        },
        {
          "name": "votesFor",
          "type": "uint256"
        },
        {
          "name": "votesAgainst",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "pollNonce",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "pollID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "numTokens",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "_VoteCommitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "pollID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "numTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "votesFor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "votesAgainst",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "choice",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "salt",
          "type": "uint256"
        }
      ],
      "name": "_VoteRevealed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "voteQuorum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "commitEndDate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "revealEndDate",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "pollID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "_PollCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "numTokens",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "_VotingRightsGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "numTokens",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "_VotingRightsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "pollID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "_TokensRescued",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_numTokens",
          "type": "uint256"
        }
      ],
      "name": "requestVotingRights",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_numTokens",
          "type": "uint256"
        }
      ],
      "name": "withdrawVotingRights",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_pollID",
          "type": "uint256"
        }
      ],
      "name": "rescueTokens",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_pollIDs",
          "type": "uint256[]"
        }
      ],
      "name": "rescueTokensInMultiplePolls",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_pollID",
          "type": "uint256"
        },
        {
          "name": "_secretHash",
          "type": "bytes32"
        },
        {
          "name": "_numTokens",
          "type": "uint256"
        },
        {
          "name": "_prevPollID",
          "type": "uint256"
        }
      ],
      "name": "commitVote",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_pollIDs",
          "type": "uint256[]"
        },
        {
          "name": "_secretHashes",
          "type": "bytes32[]"
        },
        {
          "name": "_numsTokens",
          "type": "uint256[]"
        },
        {
          "name": "_prevPollIDs",
          "type": "uint256[]"
        }
      ],
      "name": "commitVotes",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_prevID",
          "type": "uint256"
        },
        {
          "name": "_nextID",
          "type": "uint256"
        },
        {
          "name": "_voter",
          "type": "address"
        },
        {
          "name": "_numTokens",
          "type": "uint256"
        }
      ],
      "name": "validPosition",
      "outputs": [
        {
          "name": "valid",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_pollID",
          "type": "uint256"
        },
        {
          "name": "_voteOption",
          "type": "uint256"
        },
        {
          "name": "_salt",
          "type": "uint256"
        }
      ],
      "name": "revealVote",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_pollIDs",
          "type": "uint256[]"
        },
        {
          "name": "_voteOptions",
          "type": "uint256[]"
        },
        {
          "name": "_salts",
          "type": "uint256[]"
        }
      ],
      "name": "revealVotes",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_voter",
          "type": "address"
        },
        {
          "name": "_pollID",
          "type": "uint256"
        }
      ],
      "name": "getNumPassingTokens",
      "outputs": [
        {
          "name": "correctVotes",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_voteQuorum",
          "type": "uint256"
        },
        {
          "name": "_commitDuration",
          "type": "uint256"
        },
        {
          "name": "_revealDuration",
          "type": "uint256"
        }
      ],
      "name": "startPoll",
      "outputs": [
        {
          "name": "pollID",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_pollID",
          "type": "uint256"
        }
      ],
      "name": "isPassed",
      "outputs": [
        {
          "name": "passed",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_pollID",
          "type": "uint256"
        }
      ],
      "name": "getTotalNumberOfTokensForWinningOption",
      "outputs": [
        {
          "name": "numTokens",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_pollID",
          "type": "uint256"
        }
      ],
      "name": "getTotalVotes",
      "outputs": [
        {
          "name": "numTokens",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_pollID",
          "type": "uint256"
        }
      ],
      "name": "pollEnded",
      "outputs": [
        {
          "name": "ended",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_pollID",
          "type": "uint256"
        }
      ],
      "name": "commitPeriodActive",
      "outputs": [
        {
          "name": "active",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_pollID",
          "type": "uint256"
        }
      ],
      "name": "revealPeriodActive",
      "outputs": [
        {
          "name": "active",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_voter",
          "type": "address"
        },
        {
          "name": "_pollID",
          "type": "uint256"
        }
      ],
      "name": "didCommit",
      "outputs": [
        {
          "name": "committed",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_voter",
          "type": "address"
        },
        {
          "name": "_pollID",
          "type": "uint256"
        }
      ],
      "name": "didReveal",
      "outputs": [
        {
          "name": "revealed",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_pollID",
          "type": "uint256"
        }
      ],
      "name": "pollExists",
      "outputs": [
        {
          "name": "exists",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_voter",
          "type": "address"
        },
        {
          "name": "_pollID",
          "type": "uint256"
        }
      ],
      "name": "getCommitHash",
      "outputs": [
        {
          "name": "commitHash",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_voter",
          "type": "address"
        },
        {
          "name": "_pollID",
          "type": "uint256"
        }
      ],
      "name": "getNumTokens",
      "outputs": [
        {
          "name": "numTokens",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_voter",
          "type": "address"
        }
      ],
      "name": "getLastNode",
      "outputs": [
        {
          "name": "pollID",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_voter",
          "type": "address"
        }
      ],
      "name": "getLockedTokens",
      "outputs": [
        {
          "name": "numTokens",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_voter",
          "type": "address"
        },
        {
          "name": "_numTokens",
          "type": "uint256"
        },
        {
          "name": "_pollID",
          "type": "uint256"
        }
      ],
      "name": "getInsertPointForNumTokens",
      "outputs": [
        {
          "name": "prevNode",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_terminationDate",
          "type": "uint256"
        }
      ],
      "name": "isExpired",
      "outputs": [
        {
          "name": "expired",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_user",
          "type": "address"
        },
        {
          "name": "_pollID",
          "type": "uint256"
        }
      ],
      "name": "attrUUID",
      "outputs": [
        {
          "name": "UUID",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b506129b5806100206000396000f3fe608060405234801561001057600080fd5b5060043610610218576000357c010000000000000000000000000000000000000000000000000000000090048063819b029311610137578063b11d8bb8116100ca578063d901402b11610099578063d901402b14610a61578063d9548e5314610a8d578063e7b1d43c14610aaa578063ee68483014610ac7578063fc0c546a14610ae457610218565b8063b11d8bb814610943578063bb11ed7e1461096c578063c4d66de814610a0f578063d138209214610a3557610218565b8063a1103f3711610106578063a1103f37146108b1578063a25236fe146108dd578063a4439dc5146108fa578063aa7ca4641461091757610218565b8063819b02931461083757806388d21ff31461086f57806397508f361461088c578063976035601461089457610218565b8063427fa1d2116101af5780636b2d95d41161017e5780636b2d95d41461060b5780636cbf9c5e146106315780637f97e836146106605780638090f92e1461068c57610218565b8063427fa1d21461054f578063441c77c01461057557806349403183146105a65780636148fed5146105c357610218565b80632ce35e11116101eb5780632ce35e11146102b257806332ed3d60146102cf5780633b930294146102f85780633ec36b991461031e57610218565b8063053e71a61461021d5780630c03fbd71461024c5780632173a10f146102785780632c05203114610280575b600080fd5b61023a6004803603602081101561023357600080fd5b5035610b08565b60408051918252519081900360200190f35b61023a6004803603604081101561026257600080fd5b50600160a060020a038135169060200135610ba8565b61023a610d23565b61023a6004803603606081101561029657600080fd5b50600160a060020a038135169060208101359060400135610d29565b61023a600480360360208110156102c857600080fd5b5035610ef0565b61023a600480360360608110156102e557600080fd5b5080359060208101359060400135610f6f565b61023a6004803603602081101561030e57600080fd5b5035600160a060020a031661104e565b61054d6004803603608081101561033457600080fd5b81019060208101813564010000000081111561034f57600080fd5b82018360208201111561036157600080fd5b8035906020019184602083028401116401000000008311171561038357600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156103d357600080fd5b8201836020820111156103e557600080fd5b8035906020019184602083028401116401000000008311171561040757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561045757600080fd5b82018360208201111561046957600080fd5b8035906020019184602083028401116401000000008311171561048b57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156104db57600080fd5b8201836020820111156104ed57600080fd5b8035906020019184602083028401116401000000008311171561050f57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611060945050505050565b005b61023a6004803603602081101561056557600080fd5b5035600160a060020a031661110d565b6105926004803603602081101561058b57600080fd5b50356111c7565b604080519115158252519081900360200190f35b610592600480360360208110156105bc57600080fd5b503561125c565b6105e0600480360360208110156105d957600080fd5b5035611325565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b61023a6004803603602081101561062157600080fd5b5035600160a060020a0316611354565b61054d6004803603608081101561064757600080fd5b5080359060208101359060408101359060600135611368565b6105926004803603604081101561067657600080fd5b50600160a060020a038135169060200135611986565b61054d600480360360608110156106a257600080fd5b8101906020810181356401000000008111156106bd57600080fd5b8201836020820111156106cf57600080fd5b803590602001918460208302840111640100000000831117156106f157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561074157600080fd5b82018360208201111561075357600080fd5b8035906020019184602083028401116401000000008311171561077557600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156107c557600080fd5b8201836020820111156107d757600080fd5b803590602001918460208302840111640100000000831117156107f957600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506119cb945050505050565b6105926004803603608081101561084d57600080fd5b50803590602081013590600160a060020a036040820135169060600135611a51565b6105926004803603602081101561088557600080fd5b5035611a92565b61023a611aa7565b61054d600480360360208110156108aa57600080fd5b5035611aad565b61023a600480360360408110156108c757600080fd5b50600160a060020a038135169060200135611ce6565b61054d600480360360208110156108f357600080fd5b5035611d30565b6105926004803603602081101561091057600080fd5b5035611e06565b6105926004803603604081101561092d57600080fd5b50600160a060020a038135169060200135611e34565b61054d6004803603606081101561095957600080fd5b5080359060208101359060400135611ec4565b61054d6004803603602081101561098257600080fd5b81019060208101813564010000000081111561099d57600080fd5b8201836020820111156109af57600080fd5b803590602001918460208302840111640100000000831117156109d157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550612212945050505050565b61054d60048036036020811015610a2557600080fd5b5035600160a060020a031661224a565b61023a60048036036040811015610a4b57600080fd5b50600160a060020a038135169060200135612312565b61023a60048036036040811015610a7757600080fd5b50600160a060020a038135169060200135612364565b61059260048036036020811015610aa357600080fd5b50356123b6565b61054d60048036036020811015610ac057600080fd5b50356123bb565b61059260048036036020811015610add57600080fd5b503561245d565b610aec6124d9565b60408051600160a060020a039092168252519081900360200190f35b6000610b138261245d565b1515610b69576040805160e560020a62461bcd02815260206004820152600f60248201527f506f6c6c207374696c6c206f70656e0000000000000000000000000000000000604482015290519081900360640190fd5b610b728261125c565b15610b8f5750600081815260356020526040902060030154610ba3565b506000818152603560205260409020600401545b919050565b6000610bb38261245d565b1515610c09576040805160e560020a62461bcd02815260206004820152600e60248201527f506f6c6c206e6f7420656e646564000000000000000000000000000000000000604482015290519081900360640190fd5b6000828152603560209081526040808320600160a060020a038716845260060190915290205460ff161515610c88576040805160e560020a62461bcd02815260206004820152600c60248201527f6e6f742072657665616c65640000000000000000000000000000000000000000604482015290519081900360640190fd5b6000610c938361125c565b610c9e576000610ca1565b60015b6000848152603560209081526040808320600160a060020a038916845260070190915290205460ff919091169150808214610d105760405160e560020a62461bcd0281526004018080602001828103825260278152602001806129636027913960400191505060405180910390fd5b610d1a8585612312565b95945050505050565b60345481565b600080610d358561110d565b90506000610d438683612312565b90505b8115610ee557610d568683612312565b9050848111610e285783821415610e2057600160a060020a03861660009081526037602090815260409182902082517f30fe0a0a000000000000000000000000000000000000000000000000000000008152600481019190915260248101859052915173__DLL___________________________________926330fe0a0a926044808301939192829003018186803b158015610df157600080fd5b505af4158015610e05573d6000803e3d6000fd5b505050506040513d6020811015610e1b57600080fd5b505191505b509050610ee9565b600160a060020a03861660009081526037602090815260409182902082517f30fe0a0a000000000000000000000000000000000000000000000000000000008152600481019190915260248101859052915173__DLL___________________________________926330fe0a0a926044808301939192829003018186803b158015610eb257600080fd5b505af4158015610ec6573d6000803e3d6000fd5b505050506040513d6020811015610edc57600080fd5b50519150610d46565b5090505b9392505050565b6000610efb8261245d565b1515610f51576040805160e560020a62461bcd02815260206004820152600f60248201527f506f6c6c207374696c6c206f70656e0000000000000000000000000000000000604482015290519081900360640190fd5b50600090815260356020526040902060048101546003909101540190565b603380546001019055600080610f8b428563ffffffff6124e816565b90506000610f9f828563ffffffff6124e816565b6040805160a08101825284815260208082018481528284018b8152600060608086018281526080870183815260338054855260358852938990209751885594516001880155925160028701559151600386015591516004909401939093555483518b8152918201879052818401859052925193945033937f404f1f1c229d9eb2a949e7584da6ffde9d059ef2169f487ca815434cce0640d0929181900390910190a35050603354949350505050565b60366020526000908152604090205481565b825184511461106e57600080fd5b815184511461107c57600080fd5b805184511461108a57600080fd5b60005b8451811015611106576110fe85828151811015156110a757fe5b9060200190602002015185838151811015156110bf57fe5b9060200190602002015185848151811015156110d757fe5b9060200190602002015185858151811015156110ef57fe5b90602001906020020151611368565b60010161108d565b5050505050565b600160a060020a038116600090815260376020908152604080832081517f30fe0a0a000000000000000000000000000000000000000000000000000000008152600481019190915260248101849052905173__DLL___________________________________926330fe0a0a9260448082019391829003018186803b15801561119557600080fd5b505af41580156111a9573d6000803e3d6000fd5b505050506040513d60208110156111bf57600080fd5b505192915050565b60006111d282611a92565b1515611228576040805160e560020a62461bcd02815260206004820152601160248201527f6e6f6e206578697374656e7420706f6c6c000000000000000000000000000000604482015290519081900360640190fd5b600082815260356020526040902060010154611243906123b6565b158015611256575061125482611e06565b155b92915050565b60006112678261245d565b15156112bd576040805160e560020a62461bcd02815260206004820152600f60248201527f506f6c6c207374696c6c206f70656e0000000000000000000000000000000000604482015290519081900360640190fd5b6112c56128dd565b5050600090815260356020908152604091829020825160a081018452815481526001820154928101929092526002810154928201839052600381015460608301819052600490910154608090920182905290810190910260649091021190565b603560205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b6000611256826113638461110d565b612312565b61137184611e06565b15156113c7576040805160e560020a62461bcd02815260206004820152601860248201527f636f6d6d697420706572696f64206e6f74206163746976650000000000000000604482015290519081900360640190fd5b3360009081526036602052604090205482111561140c57336000908152603660205260408120546113ff90849063ffffffff6124f516565b905061140a81611d30565b505b33600090815260366020526040902054821115611473576040805160e560020a62461bcd02815260206004820152601060248201527f6e6f7420656e6f75676820766f74657300000000000000000000000000000000604482015290519081900360640190fd5b8315156114ca576040805160e560020a62461bcd02815260206004820152600e60248201527f6e6f207a65726f20706f6c6c6964000000000000000000000000000000000000604482015290519081900360640190fd5b821515611521576040805160e560020a62461bcd02815260206004820152600b60248201527f6e6f207365637265742030000000000000000000000000000000000000000000604482015290519081900360640190fd5b8015806115d757503360009081526037602090815260409182902082517f366a5ba2000000000000000000000000000000000000000000000000000000008152600481019190915260248101849052915173__DLL___________________________________9263366a5ba2926044808301939192829003018186803b1580156115aa57600080fd5b505af41580156115be573d6000803e3d6000fd5b505050506040513d60208110156115d457600080fd5b50515b15156116175760405160e560020a62461bcd02815260040180806020018281038252602781526020018061290e6027913960400191505060405180910390fd5b33600090815260376020908152604080832081517f07d29ac9000000000000000000000000000000000000000000000000000000008152600481019190915260248101859052905173__DLL___________________________________926307d29ac99260448082019391829003018186803b15801561169657600080fd5b505af41580156116aa573d6000803e3d6000fd5b505050506040513d60208110156116c057600080fd5b505190508481141561177c573360009081526037602090815260409182902082517f07d29ac9000000000000000000000000000000000000000000000000000000008152600481019190915260248101889052915173__DLL___________________________________926307d29ac9926044808301939192829003018186803b15801561174d57600080fd5b505af4158015611761573d6000803e3d6000fd5b505050506040513d602081101561177757600080fd5b505190505b61178882823386611a51565b15156117de576040805160e560020a62461bcd02815260206004820152601060248201527f696e76616c696420706f736974696f6e00000000000000000000000000000000604482015290519081900360640190fd5b3360009081526037602052604080822081517f9735c51b0000000000000000000000000000000000000000000000000000000081526004810191909152602481018590526044810188905260648101849052905173__DLL___________________________________92639735c51b9260848082019391829003018186803b15801561186957600080fd5b505af415801561187d573d6000803e3d6000fd5b50505050600061188d3387611ce6565b60408051808201909152600981527f6e756d546f6b656e73000000000000000000000000000000000000000000000060208201529091506118d99060389083908763ffffffff61250716565b60408051808201909152600a81527f636f6d6d6974486173680000000000000000000000000000000000000000000060208201526119229060389083908863ffffffff61250716565b6000868152603560209081526040808320338085526005909101835292819020805460ff191660011790558051878152905189927fea7979e4280d7e6bffc1c7d83a1ac99f16d02ecc14465ce41016226783b663d7928290030190a3505050505050565b600061199182611a92565b151561199c57600080fd5b506000908152603560209081526040808320600160a060020a0394909416835260059093019052205460ff1690565b81518351146119d957600080fd5b80518351146119e757600080fd5b60005b8351811015611a4b57611a438482815181101515611a0457fe5b906020019060200201518483815181101515611a1c57fe5b906020019060200201518484815181101515611a3457fe5b90602001906020020151611ec4565b6001016119ea565b50505050565b600080611a5e8487612312565b83101590506000611a6f8587612312565b84111580611a7b575085155b9050818015611a875750805b979650505050505050565b60008115801590611256575050603354101590565b60335481565b600081815260356020526040902060010154611ac8906123b6565b1515611b1e576040805160e560020a62461bcd02815260206004820152600b60248201527f4e6f742045787069726564000000000000000000000000000000000000000000604482015290519081900360640190fd5b3360009081526037602090815260409182902082517f366a5ba2000000000000000000000000000000000000000000000000000000008152600481019190915260248101849052915173__DLL___________________________________9263366a5ba2926044808301939192829003018186803b158015611b9f57600080fd5b505af4158015611bb3573d6000803e3d6000fd5b505050506040513d6020811015611bc957600080fd5b50511515611c21576040805160e560020a62461bcd02815260206004820152600a60248201527f4e6f7420696e20646c6c00000000000000000000000000000000000000000000604482015290519081900360640190fd5b3360009081526037602052604080822081517f6d900ed0000000000000000000000000000000000000000000000000000000008152600481019190915260248101849052905173__DLL___________________________________92636d900ed09260448082019391829003018186803b158015611c9e57600080fd5b505af4158015611cb2573d6000803e3d6000fd5b50506040513392508391507f402507661c8c8cb90e0a796450b8bdd28b6c516f05279c0cd29e84c344e1699a90600090a350565b60408051600160a060020a03939093166c01000000000000000000000000026020808501919091526034808501939093528151808503909301835260549093019052805191012090565b6039548190611d4890600160a060020a031633612591565b1015611d9e576040805160e560020a62461bcd02815260206004820152601260248201527f4e6f7420656e6f7567682062616c616e63650000000000000000000000000000604482015290519081900360640190fd5b336000818152603660205260409020805483019055603954611dcd91600160a060020a03909116903084612638565b60408051828152905133917ff7aaf024511d9982df8cd0d437c71c30106e6848cd1ba3d288d7a9c0e276aeda919081900360200190a250565b6000611e1182611a92565b1515611e1c57600080fd5b600082815260356020526040902054611254906123b6565b6000611e3f82611a92565b1515611e95576040805160e560020a62461bcd02815260206004820152600d60248201527f6e6f20706f6c6c20657869737400000000000000000000000000000000000000604482015290519081900360640190fd5b506000908152603560209081526040808320600160a060020a0394909416835260069093019052205460ff1690565b611ecd836111c7565b1515611f23576040805160e560020a62461bcd02815260206004820152601860248201527f6e6f74206163746976652072657665616c20706572696f640000000000000000604482015290519081900360640190fd5b600083815260356020908152604080832033845260050190915290205460ff161515611f99576040805160e560020a62461bcd02815260206004820152601460248201527f6e6f20636f6d6d6974732062792073656e646572000000000000000000000000604482015290519081900360640190fd5b600083815260356020908152604080832033845260060190915290205460ff161561200e576040805160e560020a62461bcd02815260206004820152601460248201527f6e6f2072657665616c732062792073656e646572000000000000000000000000604482015290519081900360640190fd5b6120183384612364565b6040805160208082018690528183018590528251808303840181526060909201909252805191012014612095576040805160e560020a62461bcd02815260206004820152601460248201527f636f6d6d69742068617368206d69736d61746368000000000000000000000000604482015290519081900360640190fd5b60006120a13385612312565b905082600114156120c85760008481526035602052604090206003018054820190556120e0565b60008481526035602052604090206004018054820190555b3360009081526037602052604080822081517f6d900ed0000000000000000000000000000000000000000000000000000000008152600481019190915260248101879052905173__DLL___________________________________92636d900ed09260448082019391829003018186803b15801561215d57600080fd5b505af4158015612171573d6000803e3d6000fd5b505050600085815260356020818152604080842033808652600682018452828620805460ff191660011790558086526007820184528286208a9055948a9052928252600383015460049093015481518781529283019390935281810192909252606081018690529051919250859187917f9b19aaec524fad29c0ced9b9973a15e3045d7c3be156d71394ab40f0d5f119ff919081900360800190a450505050565b60005b81518110156122465761223e828281518110151561222f57fe5b90602001906020020151611aad565b600101612215565b5050565b600054610100900460ff16806122635750612263612721565b80612271575060005460ff16155b15156122b15760405160e560020a62461bcd02815260040180806020018281038252602e815260200180612935602e913960400191505060405180910390fd5b600080546039805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03949094169390931790925560345460335561ff001980831661010090811760ff19166001179091169281900460ff16151502919091179055565b6000610ee96123218484611ce6565b60408051808201909152600981527f6e756d546f6b656e73000000000000000000000000000000000000000000000060208201526038919063ffffffff61272716565b6000610ee96123738484611ce6565b60408051808201909152600a81527f636f6d6d6974486173680000000000000000000000000000000000000000000060208201526038919063ffffffff61272716565b421190565b60006123e56123c933611354565b336000908152603660205260409020549063ffffffff6124f516565b9050818110156123f457600080fd5b3360008181526036602052604090208054849003905560395461242391600160a060020a0390911690846127b2565b60408051838152905133917ffaeb7dbb9992397d26ea1944efd40c80b40f702faf69b46c67ad10aba68ccb79919081900360200190a25050565b600061246882611a92565b15156124be576040805160e560020a62461bcd02815260206004820152601360248201527f706f6c6c20646f6573206e6f7420657869737400000000000000000000000000604482015290519081900360640190fd5b600082815260356020526040902060010154611256906123b6565b603954600160a060020a031681565b8181018281101561125657fe5b60008282111561250157fe5b50900390565b600083836040516020018083815260200182805190602001908083835b602083106125435780518252601f199092019160209182019101612524565b51815160209384036101000a60001901801990921691161790526040805192909401828103601f19018352845281519181019190912060009081529a90525090972093909355505050505050565b600082600160a060020a03166370a08231836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b15801561260557600080fd5b505afa158015612619573d6000803e3d6000fd5b505050506040513d602081101561262f57600080fd5b50519392505050565b604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301528481166024830152604482018490529151918616916323b872dd9160648082019260009290919082900301818387803b1580156126ab57600080fd5b505af11580156126bf573d6000803e3d6000fd5b505050506126cb6128a9565b1515611a4b576040805160e560020a62461bcd02815260206004820152601160248201527f7472616e7366657246726f6d206661696c000000000000000000000000000000604482015290519081900360640190fd5b303b1590565b60008083836040516020018083815260200182805190602001908083835b602083106127645780518252601f199092019160209182019101612745565b51815160209384036101000a60001901801990921691161790526040805192909401828103601f19018352845281519181019190912060009081529a90525090972054979650505050505050565b82600160a060020a031663a9059cbb83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050600060405180830381600087803b15801561282e57600080fd5b505af1158015612842573d6000803e3d6000fd5b5050505061284e6128a9565b15156128a4576040805160e560020a62461bcd02815260206004820152600d60248201527f7472616e73666572206661696c00000000000000000000000000000000000000604482015290519081900360640190fd5b505050565b6000803d80156128c057602081146128c9576128d5565b600191506128d5565b60206000803e60005191505b501515905090565b60a0604051908101604052806000815260200160008152602001600081526020016000815260200160008152509056fe70726576696f757320706f6c6c20696420646f6573206e6f74206578697374206f722069732030436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564566f7465722072657665616c65642c20627574206e6f7420696e20746865206d616a6f72697479a165627a7a723058204d4207fa11a2c1a0e69ec74c3aa37189ee4a7df32ce63779a4e502a806132e7c0029",
  "deployedBytecode": "0x608060405234801561001057600080fd5b5060043610610218576000357c010000000000000000000000000000000000000000000000000000000090048063819b029311610137578063b11d8bb8116100ca578063d901402b11610099578063d901402b14610a61578063d9548e5314610a8d578063e7b1d43c14610aaa578063ee68483014610ac7578063fc0c546a14610ae457610218565b8063b11d8bb814610943578063bb11ed7e1461096c578063c4d66de814610a0f578063d138209214610a3557610218565b8063a1103f3711610106578063a1103f37146108b1578063a25236fe146108dd578063a4439dc5146108fa578063aa7ca4641461091757610218565b8063819b02931461083757806388d21ff31461086f57806397508f361461088c578063976035601461089457610218565b8063427fa1d2116101af5780636b2d95d41161017e5780636b2d95d41461060b5780636cbf9c5e146106315780637f97e836146106605780638090f92e1461068c57610218565b8063427fa1d21461054f578063441c77c01461057557806349403183146105a65780636148fed5146105c357610218565b80632ce35e11116101eb5780632ce35e11146102b257806332ed3d60146102cf5780633b930294146102f85780633ec36b991461031e57610218565b8063053e71a61461021d5780630c03fbd71461024c5780632173a10f146102785780632c05203114610280575b600080fd5b61023a6004803603602081101561023357600080fd5b5035610b08565b60408051918252519081900360200190f35b61023a6004803603604081101561026257600080fd5b50600160a060020a038135169060200135610ba8565b61023a610d23565b61023a6004803603606081101561029657600080fd5b50600160a060020a038135169060208101359060400135610d29565b61023a600480360360208110156102c857600080fd5b5035610ef0565b61023a600480360360608110156102e557600080fd5b5080359060208101359060400135610f6f565b61023a6004803603602081101561030e57600080fd5b5035600160a060020a031661104e565b61054d6004803603608081101561033457600080fd5b81019060208101813564010000000081111561034f57600080fd5b82018360208201111561036157600080fd5b8035906020019184602083028401116401000000008311171561038357600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156103d357600080fd5b8201836020820111156103e557600080fd5b8035906020019184602083028401116401000000008311171561040757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561045757600080fd5b82018360208201111561046957600080fd5b8035906020019184602083028401116401000000008311171561048b57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156104db57600080fd5b8201836020820111156104ed57600080fd5b8035906020019184602083028401116401000000008311171561050f57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611060945050505050565b005b61023a6004803603602081101561056557600080fd5b5035600160a060020a031661110d565b6105926004803603602081101561058b57600080fd5b50356111c7565b604080519115158252519081900360200190f35b610592600480360360208110156105bc57600080fd5b503561125c565b6105e0600480360360208110156105d957600080fd5b5035611325565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b61023a6004803603602081101561062157600080fd5b5035600160a060020a0316611354565b61054d6004803603608081101561064757600080fd5b5080359060208101359060408101359060600135611368565b6105926004803603604081101561067657600080fd5b50600160a060020a038135169060200135611986565b61054d600480360360608110156106a257600080fd5b8101906020810181356401000000008111156106bd57600080fd5b8201836020820111156106cf57600080fd5b803590602001918460208302840111640100000000831117156106f157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561074157600080fd5b82018360208201111561075357600080fd5b8035906020019184602083028401116401000000008311171561077557600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156107c557600080fd5b8201836020820111156107d757600080fd5b803590602001918460208302840111640100000000831117156107f957600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506119cb945050505050565b6105926004803603608081101561084d57600080fd5b50803590602081013590600160a060020a036040820135169060600135611a51565b6105926004803603602081101561088557600080fd5b5035611a92565b61023a611aa7565b61054d600480360360208110156108aa57600080fd5b5035611aad565b61023a600480360360408110156108c757600080fd5b50600160a060020a038135169060200135611ce6565b61054d600480360360208110156108f357600080fd5b5035611d30565b6105926004803603602081101561091057600080fd5b5035611e06565b6105926004803603604081101561092d57600080fd5b50600160a060020a038135169060200135611e34565b61054d6004803603606081101561095957600080fd5b5080359060208101359060400135611ec4565b61054d6004803603602081101561098257600080fd5b81019060208101813564010000000081111561099d57600080fd5b8201836020820111156109af57600080fd5b803590602001918460208302840111640100000000831117156109d157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550612212945050505050565b61054d60048036036020811015610a2557600080fd5b5035600160a060020a031661224a565b61023a60048036036040811015610a4b57600080fd5b50600160a060020a038135169060200135612312565b61023a60048036036040811015610a7757600080fd5b50600160a060020a038135169060200135612364565b61059260048036036020811015610aa357600080fd5b50356123b6565b61054d60048036036020811015610ac057600080fd5b50356123bb565b61059260048036036020811015610add57600080fd5b503561245d565b610aec6124d9565b60408051600160a060020a039092168252519081900360200190f35b6000610b138261245d565b1515610b69576040805160e560020a62461bcd02815260206004820152600f60248201527f506f6c6c207374696c6c206f70656e0000000000000000000000000000000000604482015290519081900360640190fd5b610b728261125c565b15610b8f5750600081815260356020526040902060030154610ba3565b506000818152603560205260409020600401545b919050565b6000610bb38261245d565b1515610c09576040805160e560020a62461bcd02815260206004820152600e60248201527f506f6c6c206e6f7420656e646564000000000000000000000000000000000000604482015290519081900360640190fd5b6000828152603560209081526040808320600160a060020a038716845260060190915290205460ff161515610c88576040805160e560020a62461bcd02815260206004820152600c60248201527f6e6f742072657665616c65640000000000000000000000000000000000000000604482015290519081900360640190fd5b6000610c938361125c565b610c9e576000610ca1565b60015b6000848152603560209081526040808320600160a060020a038916845260070190915290205460ff919091169150808214610d105760405160e560020a62461bcd0281526004018080602001828103825260278152602001806129636027913960400191505060405180910390fd5b610d1a8585612312565b95945050505050565b60345481565b600080610d358561110d565b90506000610d438683612312565b90505b8115610ee557610d568683612312565b9050848111610e285783821415610e2057600160a060020a03861660009081526037602090815260409182902082517f30fe0a0a000000000000000000000000000000000000000000000000000000008152600481019190915260248101859052915173__DLL___________________________________926330fe0a0a926044808301939192829003018186803b158015610df157600080fd5b505af4158015610e05573d6000803e3d6000fd5b505050506040513d6020811015610e1b57600080fd5b505191505b509050610ee9565b600160a060020a03861660009081526037602090815260409182902082517f30fe0a0a000000000000000000000000000000000000000000000000000000008152600481019190915260248101859052915173__DLL___________________________________926330fe0a0a926044808301939192829003018186803b158015610eb257600080fd5b505af4158015610ec6573d6000803e3d6000fd5b505050506040513d6020811015610edc57600080fd5b50519150610d46565b5090505b9392505050565b6000610efb8261245d565b1515610f51576040805160e560020a62461bcd02815260206004820152600f60248201527f506f6c6c207374696c6c206f70656e0000000000000000000000000000000000604482015290519081900360640190fd5b50600090815260356020526040902060048101546003909101540190565b603380546001019055600080610f8b428563ffffffff6124e816565b90506000610f9f828563ffffffff6124e816565b6040805160a08101825284815260208082018481528284018b8152600060608086018281526080870183815260338054855260358852938990209751885594516001880155925160028701559151600386015591516004909401939093555483518b8152918201879052818401859052925193945033937f404f1f1c229d9eb2a949e7584da6ffde9d059ef2169f487ca815434cce0640d0929181900390910190a35050603354949350505050565b60366020526000908152604090205481565b825184511461106e57600080fd5b815184511461107c57600080fd5b805184511461108a57600080fd5b60005b8451811015611106576110fe85828151811015156110a757fe5b9060200190602002015185838151811015156110bf57fe5b9060200190602002015185848151811015156110d757fe5b9060200190602002015185858151811015156110ef57fe5b90602001906020020151611368565b60010161108d565b5050505050565b600160a060020a038116600090815260376020908152604080832081517f30fe0a0a000000000000000000000000000000000000000000000000000000008152600481019190915260248101849052905173__DLL___________________________________926330fe0a0a9260448082019391829003018186803b15801561119557600080fd5b505af41580156111a9573d6000803e3d6000fd5b505050506040513d60208110156111bf57600080fd5b505192915050565b60006111d282611a92565b1515611228576040805160e560020a62461bcd02815260206004820152601160248201527f6e6f6e206578697374656e7420706f6c6c000000000000000000000000000000604482015290519081900360640190fd5b600082815260356020526040902060010154611243906123b6565b158015611256575061125482611e06565b155b92915050565b60006112678261245d565b15156112bd576040805160e560020a62461bcd02815260206004820152600f60248201527f506f6c6c207374696c6c206f70656e0000000000000000000000000000000000604482015290519081900360640190fd5b6112c56128dd565b5050600090815260356020908152604091829020825160a081018452815481526001820154928101929092526002810154928201839052600381015460608301819052600490910154608090920182905290810190910260649091021190565b603560205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b6000611256826113638461110d565b612312565b61137184611e06565b15156113c7576040805160e560020a62461bcd02815260206004820152601860248201527f636f6d6d697420706572696f64206e6f74206163746976650000000000000000604482015290519081900360640190fd5b3360009081526036602052604090205482111561140c57336000908152603660205260408120546113ff90849063ffffffff6124f516565b905061140a81611d30565b505b33600090815260366020526040902054821115611473576040805160e560020a62461bcd02815260206004820152601060248201527f6e6f7420656e6f75676820766f74657300000000000000000000000000000000604482015290519081900360640190fd5b8315156114ca576040805160e560020a62461bcd02815260206004820152600e60248201527f6e6f207a65726f20706f6c6c6964000000000000000000000000000000000000604482015290519081900360640190fd5b821515611521576040805160e560020a62461bcd02815260206004820152600b60248201527f6e6f207365637265742030000000000000000000000000000000000000000000604482015290519081900360640190fd5b8015806115d757503360009081526037602090815260409182902082517f366a5ba2000000000000000000000000000000000000000000000000000000008152600481019190915260248101849052915173__DLL___________________________________9263366a5ba2926044808301939192829003018186803b1580156115aa57600080fd5b505af41580156115be573d6000803e3d6000fd5b505050506040513d60208110156115d457600080fd5b50515b15156116175760405160e560020a62461bcd02815260040180806020018281038252602781526020018061290e6027913960400191505060405180910390fd5b33600090815260376020908152604080832081517f07d29ac9000000000000000000000000000000000000000000000000000000008152600481019190915260248101859052905173__DLL___________________________________926307d29ac99260448082019391829003018186803b15801561169657600080fd5b505af41580156116aa573d6000803e3d6000fd5b505050506040513d60208110156116c057600080fd5b505190508481141561177c573360009081526037602090815260409182902082517f07d29ac9000000000000000000000000000000000000000000000000000000008152600481019190915260248101889052915173__DLL___________________________________926307d29ac9926044808301939192829003018186803b15801561174d57600080fd5b505af4158015611761573d6000803e3d6000fd5b505050506040513d602081101561177757600080fd5b505190505b61178882823386611a51565b15156117de576040805160e560020a62461bcd02815260206004820152601060248201527f696e76616c696420706f736974696f6e00000000000000000000000000000000604482015290519081900360640190fd5b3360009081526037602052604080822081517f9735c51b0000000000000000000000000000000000000000000000000000000081526004810191909152602481018590526044810188905260648101849052905173__DLL___________________________________92639735c51b9260848082019391829003018186803b15801561186957600080fd5b505af415801561187d573d6000803e3d6000fd5b50505050600061188d3387611ce6565b60408051808201909152600981527f6e756d546f6b656e73000000000000000000000000000000000000000000000060208201529091506118d99060389083908763ffffffff61250716565b60408051808201909152600a81527f636f6d6d6974486173680000000000000000000000000000000000000000000060208201526119229060389083908863ffffffff61250716565b6000868152603560209081526040808320338085526005909101835292819020805460ff191660011790558051878152905189927fea7979e4280d7e6bffc1c7d83a1ac99f16d02ecc14465ce41016226783b663d7928290030190a3505050505050565b600061199182611a92565b151561199c57600080fd5b506000908152603560209081526040808320600160a060020a0394909416835260059093019052205460ff1690565b81518351146119d957600080fd5b80518351146119e757600080fd5b60005b8351811015611a4b57611a438482815181101515611a0457fe5b906020019060200201518483815181101515611a1c57fe5b906020019060200201518484815181101515611a3457fe5b90602001906020020151611ec4565b6001016119ea565b50505050565b600080611a5e8487612312565b83101590506000611a6f8587612312565b84111580611a7b575085155b9050818015611a875750805b979650505050505050565b60008115801590611256575050603354101590565b60335481565b600081815260356020526040902060010154611ac8906123b6565b1515611b1e576040805160e560020a62461bcd02815260206004820152600b60248201527f4e6f742045787069726564000000000000000000000000000000000000000000604482015290519081900360640190fd5b3360009081526037602090815260409182902082517f366a5ba2000000000000000000000000000000000000000000000000000000008152600481019190915260248101849052915173__DLL___________________________________9263366a5ba2926044808301939192829003018186803b158015611b9f57600080fd5b505af4158015611bb3573d6000803e3d6000fd5b505050506040513d6020811015611bc957600080fd5b50511515611c21576040805160e560020a62461bcd02815260206004820152600a60248201527f4e6f7420696e20646c6c00000000000000000000000000000000000000000000604482015290519081900360640190fd5b3360009081526037602052604080822081517f6d900ed0000000000000000000000000000000000000000000000000000000008152600481019190915260248101849052905173__DLL___________________________________92636d900ed09260448082019391829003018186803b158015611c9e57600080fd5b505af4158015611cb2573d6000803e3d6000fd5b50506040513392508391507f402507661c8c8cb90e0a796450b8bdd28b6c516f05279c0cd29e84c344e1699a90600090a350565b60408051600160a060020a03939093166c01000000000000000000000000026020808501919091526034808501939093528151808503909301835260549093019052805191012090565b6039548190611d4890600160a060020a031633612591565b1015611d9e576040805160e560020a62461bcd02815260206004820152601260248201527f4e6f7420656e6f7567682062616c616e63650000000000000000000000000000604482015290519081900360640190fd5b336000818152603660205260409020805483019055603954611dcd91600160a060020a03909116903084612638565b60408051828152905133917ff7aaf024511d9982df8cd0d437c71c30106e6848cd1ba3d288d7a9c0e276aeda919081900360200190a250565b6000611e1182611a92565b1515611e1c57600080fd5b600082815260356020526040902054611254906123b6565b6000611e3f82611a92565b1515611e95576040805160e560020a62461bcd02815260206004820152600d60248201527f6e6f20706f6c6c20657869737400000000000000000000000000000000000000604482015290519081900360640190fd5b506000908152603560209081526040808320600160a060020a0394909416835260069093019052205460ff1690565b611ecd836111c7565b1515611f23576040805160e560020a62461bcd02815260206004820152601860248201527f6e6f74206163746976652072657665616c20706572696f640000000000000000604482015290519081900360640190fd5b600083815260356020908152604080832033845260050190915290205460ff161515611f99576040805160e560020a62461bcd02815260206004820152601460248201527f6e6f20636f6d6d6974732062792073656e646572000000000000000000000000604482015290519081900360640190fd5b600083815260356020908152604080832033845260060190915290205460ff161561200e576040805160e560020a62461bcd02815260206004820152601460248201527f6e6f2072657665616c732062792073656e646572000000000000000000000000604482015290519081900360640190fd5b6120183384612364565b6040805160208082018690528183018590528251808303840181526060909201909252805191012014612095576040805160e560020a62461bcd02815260206004820152601460248201527f636f6d6d69742068617368206d69736d61746368000000000000000000000000604482015290519081900360640190fd5b60006120a13385612312565b905082600114156120c85760008481526035602052604090206003018054820190556120e0565b60008481526035602052604090206004018054820190555b3360009081526037602052604080822081517f6d900ed0000000000000000000000000000000000000000000000000000000008152600481019190915260248101879052905173__DLL___________________________________92636d900ed09260448082019391829003018186803b15801561215d57600080fd5b505af4158015612171573d6000803e3d6000fd5b505050600085815260356020818152604080842033808652600682018452828620805460ff191660011790558086526007820184528286208a9055948a9052928252600383015460049093015481518781529283019390935281810192909252606081018690529051919250859187917f9b19aaec524fad29c0ced9b9973a15e3045d7c3be156d71394ab40f0d5f119ff919081900360800190a450505050565b60005b81518110156122465761223e828281518110151561222f57fe5b90602001906020020151611aad565b600101612215565b5050565b600054610100900460ff16806122635750612263612721565b80612271575060005460ff16155b15156122b15760405160e560020a62461bcd02815260040180806020018281038252602e815260200180612935602e913960400191505060405180910390fd5b600080546039805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03949094169390931790925560345460335561ff001980831661010090811760ff19166001179091169281900460ff16151502919091179055565b6000610ee96123218484611ce6565b60408051808201909152600981527f6e756d546f6b656e73000000000000000000000000000000000000000000000060208201526038919063ffffffff61272716565b6000610ee96123738484611ce6565b60408051808201909152600a81527f636f6d6d6974486173680000000000000000000000000000000000000000000060208201526038919063ffffffff61272716565b421190565b60006123e56123c933611354565b336000908152603660205260409020549063ffffffff6124f516565b9050818110156123f457600080fd5b3360008181526036602052604090208054849003905560395461242391600160a060020a0390911690846127b2565b60408051838152905133917ffaeb7dbb9992397d26ea1944efd40c80b40f702faf69b46c67ad10aba68ccb79919081900360200190a25050565b600061246882611a92565b15156124be576040805160e560020a62461bcd02815260206004820152601360248201527f706f6c6c20646f6573206e6f7420657869737400000000000000000000000000604482015290519081900360640190fd5b600082815260356020526040902060010154611256906123b6565b603954600160a060020a031681565b8181018281101561125657fe5b60008282111561250157fe5b50900390565b600083836040516020018083815260200182805190602001908083835b602083106125435780518252601f199092019160209182019101612524565b51815160209384036101000a60001901801990921691161790526040805192909401828103601f19018352845281519181019190912060009081529a90525090972093909355505050505050565b600082600160a060020a03166370a08231836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b15801561260557600080fd5b505afa158015612619573d6000803e3d6000fd5b505050506040513d602081101561262f57600080fd5b50519392505050565b604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301528481166024830152604482018490529151918616916323b872dd9160648082019260009290919082900301818387803b1580156126ab57600080fd5b505af11580156126bf573d6000803e3d6000fd5b505050506126cb6128a9565b1515611a4b576040805160e560020a62461bcd02815260206004820152601160248201527f7472616e7366657246726f6d206661696c000000000000000000000000000000604482015290519081900360640190fd5b303b1590565b60008083836040516020018083815260200182805190602001908083835b602083106127645780518252601f199092019160209182019101612745565b51815160209384036101000a60001901801990921691161790526040805192909401828103601f19018352845281519181019190912060009081529a90525090972054979650505050505050565b82600160a060020a031663a9059cbb83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050600060405180830381600087803b15801561282e57600080fd5b505af1158015612842573d6000803e3d6000fd5b5050505061284e6128a9565b15156128a4576040805160e560020a62461bcd02815260206004820152600d60248201527f7472616e73666572206661696c00000000000000000000000000000000000000604482015290519081900360640190fd5b505050565b6000803d80156128c057602081146128c9576128d5565b600191506128d5565b60206000803e60005191505b501515905090565b60a0604051908101604052806000815260200160008152602001600081526020016000815260200160008152509056fe70726576696f757320706f6c6c20696420646f6573206e6f74206578697374206f722069732030436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564566f7465722072657665616c65642c20627574206e6f7420696e20746865206d616a6f72697479a165627a7a723058204d4207fa11a2c1a0e69ec74c3aa37189ee4a7df32ce63779a4e502a806132e7c0029",
  "sourceMap": "334:21529:2:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;334:21529:2;;;;;;;",
  "deployedSourceMap": "334:21529:2:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;334:21529:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14403:303;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;14403:303:2;;:::i;:::-;;;;;;;;;;;;;;;;12032:498;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;12032:498:2;;;;;;;;:::i;1997:30::-;;;:::i;19832:1193::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;19832:1193:2;;;;;;;;;;;;;:::i;14712:212::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;14712:212:2;;:::i;12969:628::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;12969:628:2;;;;;;;;;;;;:::i;2106:48::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2106:48:2;-1:-1:-1;;;;;2106:48:2;;:::i;7692:596::-;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;7692:596:2;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;7692:596:2;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;7692:596:2;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;7692:596:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;7692:596:2;;;;;;;;-1:-1:-1;7692:596:2;;-1:-1:-1;;21:11;5:28;;2:2;;;46:1;43;36:12;2:2;7692:596:2;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;7692:596:2;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;7692:596:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;7692:596:2;;;;;;;;-1:-1:-1;7692:596:2;;-1:-1:-1;;21:11;5:28;;2:2;;;46:1;43;36:12;2:2;7692:596:2;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;7692:596:2;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;7692:596:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;7692:596:2;;;;;;;;-1:-1:-1;7692:596:2;;-1:-1:-1;;21:11;5:28;;2:2;;;46:1;43;36:12;2:2;7692:596:2;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;7692:596:2;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;7692:596:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;7692:596:2;;-1:-1:-1;7692:596:2;;-1:-1:-1;;;;;7692:596:2:i;:::-;;18670:120;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;18670:120:2;-1:-1:-1;;;;;18670:120:2;;:::i;16016:234::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;16016:234:2;;:::i;:::-;;;;;;;;;;;;;;;;;;13816:271;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;13816:271:2;;:::i;2034:36::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2034:36:2;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18979:143;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;18979:143:2;-1:-1:-1;;;;;18979:143:2;;:::i;5378:1720::-;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;5378:1720:2;;;;;;;;;;;;;;;;;:::i;16506:183::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;16506:183:2;;;;;;;;:::i;11318:472::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11318:472:2;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;11318:472:2;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;11318:472:2;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;11318:472:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;11318:472:2;;;;;;;;-1:-1:-1;11318:472:2;;-1:-1:-1;;21:11;5:28;;2:2;;;46:1;43;36:12;2:2;11318:472:2;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;11318:472:2;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;11318:472:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;11318:472:2;;;;;;;;-1:-1:-1;11318:472:2;;-1:-1:-1;;21:11;5:28;;2:2;;;46:1;43;36:12;2:2;11318:472:2;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;11318:472:2;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;11318:472:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;11318:472:2;;-1:-1:-1;11318:472:2;;-1:-1:-1;;;;;11318:472:2:i;8794:395::-;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;8794:395:2;;;;;;;;-1:-1:-1;;;;;8794:395:2;;;;;;;;;;:::i;17338:130::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;17338:130:2;;:::i;1970:21::-;;;:::i;4093:289::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4093:289:2;;:::i;21712:149::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;21712:149:2;;;;;;;;:::i;3003:343::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3003:343:2;;:::i;15604:181::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;15604:181:2;;:::i;16943:199::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;16943:199:2;;;;;;;;:::i;9551:1329::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;9551:1329:2;;;;;;;;;;;;:::i;4559:234::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4559:234:2;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;4559:234:2;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;4559:234:2;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;4559:234:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;4559:234:2;;-1:-1:-1;4559:234:2;;-1:-1:-1;;;;;4559:234:2:i;2440:200::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2440:200:2;-1:-1:-1;;;;;2440:200:2;;:::i;18289:171::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;18289:171:2;;;;;;;;:::i;17831:186::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;17831:186:2;;;;;;;;:::i;21343:137::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;21343:137:2;;:::i;3554:377::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3554:377:2;;:::i;15109:193::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;15109:193:2;;:::i;2278:20::-;;;:::i;:::-;;;;-1:-1:-1;;;;;2278:20:2;;;;;;;;;;;;;;14403:303;14486:14;14520:18;14530:7;14520:9;:18::i;:::-;14512:46;;;;;;;-1:-1:-1;;;;;14512:46:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;14573:17;14582:7;14573:8;:17::i;:::-;14569:130;;;-1:-1:-1;14611:16:2;;;;:7;:16;;;;;:25;;;14604:32;;14569:130;-1:-1:-1;14670:16:2;;;;:7;:16;;;;;:29;;;14569:130;14403:303;;;:::o;12032:498::-;12112:17;12149:18;12159:7;12149:9;:18::i;:::-;12141:45;;;;;;;-1:-1:-1;;;;;12141:45:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;12204:16;;;;:7;:16;;;;;;;;-1:-1:-1;;;;;12204:34:2;;;;:26;;:34;;;;;;;;12196:59;;;;;;;-1:-1:-1;;;;;12196:59:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;12266:18;12287:17;12296:7;12287:8;:17::i;:::-;:25;;12311:1;12287:25;;;12307:1;12287:25;12322:20;12345:16;;;:7;:16;;;;;;;;-1:-1:-1;;;;;12345:36:2;;;;:28;;:36;;;;;;12266:46;;;;;;-1:-1:-1;12400:32:2;;;12392:84;;;;-1:-1:-1;;;;;12392:84:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12494:29;12507:6;12515:7;12494:12;:29::i;:::-;12487:36;12032:498;-1:-1:-1;;;;;12032:498:2:o;1997:30::-;;;;:::o;19832:1193::-;19940:13;20044:11;20058:19;20070:6;20058:11;:19::i;:::-;20044:33;;20087:17;20107:28;20120:6;20128;20107:12;:28::i;:::-;20087:48;;20221:676;20227:11;;20221:676;;20329:28;20342:6;20350;20329:12;:28::i;:::-;20314:43;-1:-1:-1;20374:26:2;;;20371:368;;20463:7;20453:6;:17;20450:200;;;-1:-1:-1;;;;;20601:14:2;;;;;;:6;:14;;;;;;;;;:30;;;;;;;;;;;;;;;;;;;;:22;;;;:30;;;;;:14;;:30;;;;;:22;:30;;;5:2:-1;;;;30:1;27;20:12;5:2;20601:30:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;20601:30:2;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;20601:30:2;;-1:-1:-1;20450:200:2;-1:-1:-1;20717:6:2;-1:-1:-1;20710:13:2;;20371:368;-1:-1:-1;;;;;20856:14:2;;;;;;:6;:14;;;;;;;;;:30;;;;;;;;;;;;;;;;;;;;:22;;;;:30;;;;;:14;;:30;;;;;:22;:30;;;5:2:-1;;;;30:1;27;20:12;5:2;20856:30:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;20856:30:2;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;20856:30:2;;-1:-1:-1;20221:676:2;;;-1:-1:-1;21012:6:2;-1:-1:-1;19832:1193:2;;;;;;:::o;14712:212::-;14770:14;14804:18;14814:7;14804:9;:18::i;:::-;14796:46;;;;;;;-1:-1:-1;;;;;14796:46:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;14888:16:2;;;;:7;:16;;;;;:29;;;;14860:25;;;;;:57;;14712:212::o;12969:628::-;13101:9;;;13113:1;13101:13;13089:25;;13066:11;;13146:36;:15;13166;13146:36;:19;:36;:::i;:::-;13125:57;-1:-1:-1;13192:18:2;13213:34;13125:57;13231:15;13213:34;:17;:34;:::i;:::-;13279:191;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;13279:191:2;;;;;;;;;;;;;13266:9;;;13258:18;;:7;:18;;;;;;:212;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13542:9;13486:78;;;;;;;;;;;;;;;;;;;13192:55;;-1:-1:-1;13553:10:2;;13486:78;;;;;;;;;;;-1:-1:-1;;13581:9:2;;;12969:628;-1:-1:-1;;;;12969:628:2:o;2106:48::-;;;;;;;;;;;;;:::o;7692:596::-;7924:20;;7905:15;;:39;7897:48;;;;;;7982:18;;7963:15;;:37;7955:46;;;;;;8038:19;;8019:15;;:38;8011:47;;;;;;8145:6;8140:142;8161:8;:15;8157:1;:19;8140:142;;;8197:74;8208:8;8217:1;8208:11;;;;;;;;;;;;;;;;;;8221:13;8235:1;8221:16;;;;;;;;;;;;;;;;;;8239:11;8251:1;8239:14;;;;;;;;;;;;;;;;;;8255:12;8268:1;8255:15;;;;;;;;;;;;;;;;;;8197:10;:74::i;:::-;8178:3;;8140:142;;;;7692:596;;;;:::o;18670:120::-;-1:-1:-1;;;;;18758:14:2;;18728:11;18758:14;;;:6;:14;;;;;;;;:25;;;;;;;;;;;;;;;;;;;;:22;;;;:25;;;;;;;;;;;:22;:25;;;5:2:-1;;;;30:1;27;20:12;5:2;18758:25:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;18758:25:2;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;18758:25:2;;18670:120;-1:-1:-1;;18670:120:2:o;16016:234::-;16079:11;16110:19;16121:7;16110:10;:19::i;:::-;16102:49;;;;;;;-1:-1:-1;;;;;16102:49:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;16180:16;;;;:7;:16;;;;;:30;;;16170:41;;:9;:41::i;:::-;16169:42;:74;;;;;16216:27;16235:7;16216:18;:27::i;:::-;16215:28;16169:74;16162:81;16016:234;-1:-1:-1;;16016:234:2:o;13816:271::-;13869:11;13900:18;13910:7;13900:9;:18::i;:::-;13892:46;;;;;;;-1:-1:-1;;;;;13892:46:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;13949:16;;:::i;:::-;-1:-1:-1;;13968:16:2;;;;:7;:16;;;;;;;;;13949:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14045:33;;;14026:53;;;14002:3;:19;;;14001:79;;13816:271::o;2034:36::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;18979:143::-;19041:14;19074:41;19087:6;19095:19;19107:6;19095:11;:19::i;:::-;19074:12;:41::i;5378:1720::-;5493:27;5512:7;5493:18;:27::i;:::-;5485:64;;;;;;;-1:-1:-1;;;;;5485:64:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;5685:10;5668:28;;;;:16;:28;;;;;;:41;-1:-1:-1;5664:177:2;;;5774:10;5725:14;5757:28;;;:16;:28;;;;;;5742:44;;:10;;:44;:14;:44;:::i;:::-;5725:61;;5800:30;5820:9;5800:19;:30::i;:::-;5664:177;;5933:10;5916:28;;;;:16;:28;;;;;;:42;-1:-1:-1;5916:42:2;5908:71;;;;;-1:-1:-1;;;;;5908:71:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;6062:12;;;6054:39;;;;;-1:-1:-1;;;;;6054:39:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;6169:16;;;6161:40;;;;;-1:-1:-1;;;;;6161:40:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;6300:16;;;:60;;-1:-1:-1;6327:10:2;6320:18;;;;:6;:18;;;;;;;;;:40;;;;;;;;;;;;;;;;;;;;:27;;;;:40;;;;;:18;;:40;;;;;:27;:40;;;5:2:-1;;;;30:1;27;20:12;5:2;6320:40:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6320:40:2;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;6320:40:2;6300:60;6292:112;;;;;;-1:-1:-1;;;;;6292:112:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6440:10;6415:15;6433:18;;;:6;:18;;;;;;;;:39;;;;;;;;;;;;;;;;;;;;:26;;;;:39;;;;;;;;;;;:26;:39;;;5:2:-1;;;;30:1;27;20:12;5:2;6433:39:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6433:39:2;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;6433:39:2;;-1:-1:-1;6525:21:2;;;6521:100;;;6582:10;6575:18;;;;:6;:18;;;;;;;;;:35;;;;;;;;;;;;;;;;;;;;:26;;;;:35;;;;;:18;;:35;;;;;:26;:35;;;5:2:-1;;;;30:1;27;20:12;5:2;6575:35:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6575:35:2;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;6575:35:2;;-1:-1:-1;6521:100:2;6639:62;6653:11;6666:10;6678;6690;6639:13;:62::i;:::-;6631:91;;;;;;;-1:-1:-1;;;;;6631:91:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;6739:10;6732:18;;;;:6;:18;;;;;;:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:25;;;;:59;;;;;;;;;;;:25;:59;;;5:2:-1;;;;30:1;27;20:12;5:2;6732:59:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6732:59:2;;;;6802:12;6817:29;6826:10;6838:7;6817:8;:29::i;:::-;6857:49;;;;;;;;;;;;;;;;;6802:44;;-1:-1:-1;6857:49:2;;:5;;6802:44;;6895:10;6857:49;:18;:49;:::i;:::-;6916:57;;;;;;;;;;;;;;;;;;;:5;;6935:4;;6960:11;6916:57;:18;:57;:::i;:::-;6984:16;;;;:7;:16;;;;;;;;7011:10;6984:38;;;:26;;;;:38;;;;;;:45;;-1:-1:-1;;6984:45:2;7025:4;6984:45;;;7044:47;;;;;;;6992:7;;7044:47;;;;;;;;5378:1720;;;;;;:::o;16506:183::-;16576:14;16610:19;16621:7;16610:10;:19::i;:::-;16602:28;;;;;;;;-1:-1:-1;16648:16:2;;;;:7;:16;;;;;;;;-1:-1:-1;;;;;16648:34:2;;;;;;:26;;;;:34;;;;;;;16506:183::o;11318:472::-;11513:19;;11494:15;;:38;11486:47;;;;;;11570:13;;11551:15;;:32;11543:41;;;;;;11670:6;11665:119;11686:8;:15;11682:1;:19;11665:119;;;11722:51;11733:8;11742:1;11733:11;;;;;;;;;;;;;;;;;;11746:12;11759:1;11746:15;;;;;;;;;;;;;;;;;;11763:6;11770:1;11763:9;;;;;;;;;;;;;;;;;;11722:10;:51::i;:::-;11703:3;;11665:119;;;;11318:472;;;:::o;8794:395::-;8899:10;8921:14;8953:29;8966:6;8974:7;8953:12;:29::i;:::-;8939:10;:43;;8921:62;;9065:14;9097:29;9110:6;9118:7;9097:12;:29::i;:::-;9083:10;:43;;:59;;;-1:-1:-1;9130:12:2;;9083:59;9065:78;;9160:9;:22;;;;;9173:9;9160:22;9153:29;8794:395;-1:-1:-1;;;;;;;8794:395:2:o;17338:130::-;17393:11;17424:12;;;;;:36;;-1:-1:-1;;17451:9:2;;-1:-1:-1;17440:20:2;;17338:130::o;1970:21::-;;;;:::o;4093:289::-;4164:16;;;;:7;:16;;;;;:30;;;4154:41;;:9;:41::i;:::-;4146:65;;;;;;;-1:-1:-1;;;;;4146:65:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;4236:10;4229:18;;;;:6;:18;;;;;;;;;:36;;;;;;;;;;;;;;;;;;;;:27;;;;:36;;;;;:18;;:36;;;;;:27;:36;;;5:2:-1;;;;30:1;27;20:12;5:2;4229:36:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4229:36:2;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4229:36:2;4221:59;;;;;;;-1:-1:-1;;;;;4221:59:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;4298:10;4291:18;;;;:6;:18;;;;;;:34;;;;;;;;;;;;;;;;;;;;:25;;;;:34;;;;;;;;;;;:25;:34;;;5:2:-1;;;;30:1;27;20:12;5:2;4291:34:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;4340:35:2;;4364:10;;-1:-1:-1;4355:7:2;;-1:-1:-1;4340:35:2;;;;;4093:289;:::o;21712:149::-;21821:32;;;-1:-1:-1;;;;;21821:32:2;;;;;;;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;21821:32:2;;;;;;21811:43;;;;;;21712:149::o;3003:343::-;3094:5;;3116:10;;3074:38;;-1:-1:-1;;;;;3094:5:2;3101:10;3074:19;:38::i;:::-;:52;;3066:83;;;;;-1:-1:-1;;;;;3066:83:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;3176:10;3159:28;;;;:16;:28;;;;;:42;;;;;;3234:5;;3211:69;;-1:-1:-1;;;;;3234:5:2;;;;3262:4;3159:42;3211:22;:69::i;:::-;3295:44;;;;;;;;3328:10;;3295:44;;;;;;;;;;3003:343;:::o;15604:181::-;15667:11;15698:19;15709:7;15698:10;:19::i;:::-;15690:28;;;;;;;;15747:16;;;;:7;:16;;;;;:30;15737:41;;:9;:41::i;16943:199::-;17013:13;17046:19;17057:7;17046:10;:19::i;:::-;17038:45;;;;;;;-1:-1:-1;;;;;17038:45:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;17101:16:2;;;;:7;:16;;;;;;;;-1:-1:-1;;;;;17101:34:2;;;;;;:26;;;;:34;;;;;;;16943:199::o;9551:1329::-;9689:27;9708:7;9689:18;:27::i;:::-;9681:64;;;;;;;-1:-1:-1;;;;;9681:64:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;9763:16;;;;:7;:16;;;;;;;;9790:10;9763:38;;:26;;:38;;;;;;;;9755:70;;;;;;;-1:-1:-1;;;;;9755:70:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;9921:16;;;;:7;:16;;;;;;;;9948:10;9921:38;;:26;;:38;;;;;;;;9920:39;9912:72;;;;;-1:-1:-1;;;;;9912:72:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;10122:34;10136:10;10148:7;10122:13;:34::i;:::-;10081:36;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;6:49;;10081:36:2;;;;;;;10071:47;;;;;:85;10063:118;;;;;-1:-1:-1;;;;;10063:118:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;10253:14;10270:33;10283:10;10295:7;10270:12;:33::i;:::-;10253:50;;10318:11;10333:1;10318:16;10314:203;;;10395:16;;;;:7;:16;;;;;:25;;:38;;;;;;10314:203;;;10464:16;;;;:7;:16;;;;;:29;;:42;;;;;;10314:203;10534:10;10527:18;;;;:6;:18;;;;;;:34;;;;;;;;;;;;;;;;;;;;:25;;;;:34;;;;;;;;;;;:25;:34;;;5:2:-1;;;;30:1;27;20:12;5:2;10527:34:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;;10625:16:2;;;;:7;:16;;;;;;;;10652:10;10625:38;;;:26;;;:38;;;;;:45;;-1:-1:-1;;10625:45:2;10666:4;10625:45;;;10680:40;;;:28;;;:40;;;;;:54;;;10784:16;;;;;;;:25;;;;10811:29;;;;;10750:123;;;;;;;;;;;;;;;;;;;;;;;;;;;10652:10;;-1:-1:-1;10723:11:2;;10633:7;;10750:123;;;;;;;;;;9551:1329;;;;:::o;4559:234::-;4699:6;4694:93;4715:8;:15;4711:1;:19;4694:93;;;4751:25;4764:8;4773:1;4764:11;;;;;;;;;;;;;;;;;;4751:12;:25::i;:::-;4732:3;;4694:93;;;;4559:234;:::o;2440:200::-;1024:12:29;;;;;;;;:31;;;1040:15;:13;:15::i;:::-;1024:47;;;-1:-1:-1;1060:11:29;;;;1059:12;1024:47;1016:106;;;;;;-1:-1:-1;;;;;1016:106:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1129:20;1152:12;;2579:5:2;:14;;-1:-1:-1;;2579:14:2;-1:-1:-1;;;;;2579:14:2;;;;;;;;;;;2615:18;;2603:9;:30;-1:-1:-1;;1170:19:29;;;1152:12;1170:19;;;-1:-1:-1;;1195:18:29;-1:-1:-1;1195:18:29;1228:30;;;1152:12;;;;;;1228:30;;;;;;;;;2440:200:2:o;18289:171::-;18362:14;18395:58;18414:25;18423:6;18431:7;18414:8;:25::i;:::-;18395:58;;;;;;;;;;;;;;;;;:5;;:58;;:18;:58;:::i;17831:186::-;17905:18;17950:59;17969:25;17978:6;17986:7;17969:8;:25::i;:::-;17950:59;;;;;;;;;;;;;;;;;:5;;:59;;:18;:59;:::i;21343:137::-;21438:15;-1:-1:-1;;21343:137:2:o;3554:377::-;3620:20;3643:61;3676:27;3692:10;3676:15;:27::i;:::-;3660:10;3643:28;;;;:16;:28;;;;;;;:61;:32;:61;:::i;:::-;3620:84;-1:-1:-1;3722:29:2;;;;3714:38;;;;;;3779:10;3762:28;;;;:16;:28;;;;;:42;;;;;;;3833:5;;3814:49;;-1:-1:-1;;;;;3833:5:2;;;;3762:42;3814:18;:49::i;:::-;3878:46;;;;;;;;3913:10;;3878:46;;;;;;;;;;3554:377;;:::o;15109:193::-;15163:10;15193:19;15204:7;15193:10;:19::i;:::-;15185:51;;;;;;;-1:-1:-1;;;;;15185:51:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;15264:16;;;;:7;:16;;;;;:30;;;15254:41;;:9;:41::i;2278:20::-;;;-1:-1:-1;;;;;2278:20:2;;:::o;1345:142:30:-;1430:7;;;1454;;;;1447:15;;;1149:126;1209:7;1235:8;;;;1228:16;;;;-1:-1:-1;1261:7:30;;;1149:126::o;355:221:3:-;474:11;515:5;522:9;498:34;;;;;;;;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;498:34:3;;;;;;;26:21:-1;;;-1:-1;;22:32;6:49;;498:34:3;;488:45;;;;;;;;;-1:-1:-1;543:15:3;;;;;;-1:-1:-1;543:15:3;;;:26;;;;-1:-1:-1;;;;;;355:221:3:o;1462:133:25:-;1536:4;1566:5;-1:-1:-1;;;;;1553:29:25;;1583:7;1553:38;;;;;;;;;;;;;-1:-1:-1;;;;;1553:38:25;-1:-1:-1;;;;;1553:38:25;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1553:38:25;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1553:38:25;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1553:38:25;;1462:133;-1:-1:-1;;;1462:133:25:o;1093:194::-;1185:50;;;;;;-1:-1:-1;;;;;1185:50:25;;;;;;;;;;;;;;;;;;;;;;:32;;;;;;:50;;;;;-1:-1:-1;;1185:50:25;;;;;;;;-1:-1:-1;1185:32:25;:50;;;5:2:-1;;;;30:1;27;20:12;5:2;1185:50:25;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1185:50:25;;;;1247:14;:12;:14::i;:::-;1239:44;;;;;;;-1:-1:-1;;;;;1239:44:25;;;;;;;;;;;;;;;;;;;;;;;;;;;1349:467:29;1782:7;1770:20;1804:7;1349:467;:::o;127:222:3:-;235:4;251:11;292:5;299:9;275:34;;;;;;;;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;275:34:3;;;;;;;26:21:-1;;;-1:-1;;22:32;6:49;;275:34:3;;265:45;;;;;;;;;-1:-1:-1;327:15:3;;;;;;-1:-1:-1;327:15:3;;;;;127:222;-1:-1:-1;;;;;;;127:222:3:o;928:162:25:-;1015:5;-1:-1:-1;;;;;1002:28:25;;1031:2;1035:6;1002:40;;;;;;;;;;;;;-1:-1:-1;;;;;1002:40:25;-1:-1:-1;;;;;1002:40:25;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1002:40:25;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1002:40:25;;;;1054:14;:12;:14::i;:::-;1046:40;;;;;;;-1:-1:-1;;;;;1046:40:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;928:162;;;:::o;339:586::-;391:4;;512:14;571:36;;;;660:4;655:163;;;;505:385;;571:36;601:1;586:16;;571:36;;655:163;736:4;731:3;726;711:30;809:3;803:10;788:25;;505:385;-1:-1:-1;905:16:25;;;-1:-1:-1;339:586:25;:::o;334:21529:2:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o",
  "source": "pragma solidity >=0.5.0 <0.6.0;\n\nimport \"./dll/DLL.sol\";\nimport \"./attrstore/AttributeStore.sol\";\nimport \"../utils/SafeMath.sol\";\nimport \"../utils/Initializable.sol\";\nimport \"../token/ERC20/SafeERC20.sol\";\n\n/**\n@title Partial-Lock-Commit-Reveal Voting scheme with ERC20 tokens\n@author Team: Aspyn Palatnick, Cem Ozer, Yorke Rhodes\n*/\ncontract PLCRVoting is Initializable {\n\n    // ============\n    // EVENTS:\n    // ============\n\n    event _VoteCommitted(uint indexed pollID, uint numTokens, address indexed voter);\n    event _VoteRevealed(uint indexed pollID, uint numTokens, uint votesFor, uint votesAgainst, uint indexed choice, address indexed voter, uint salt);\n    event _PollCreated(uint voteQuorum, uint commitEndDate, uint revealEndDate, uint indexed pollID, address indexed creator);\n    event _VotingRightsGranted(uint numTokens, address indexed voter);\n    event _VotingRightsWithdrawn(uint numTokens, address indexed voter);\n    event _TokensRescued(uint indexed pollID, address indexed voter);\n\n    // ============\n    // DATA STRUCTURES:\n    // ============\n\n    using AttributeStore for AttributeStore.Data;\n    using DLL for DLL.Data;\n    using SafeMath for uint;\n\n    struct Poll {\n        uint commitEndDate;     /// expiration date of commit period for poll\n        uint revealEndDate;     /// expiration date of reveal period for poll\n        uint voteQuorum;\t    /// number of votes required for a proposal to pass\n        uint votesFor;\t\t    /// tally of votes supporting proposal\n        uint votesAgainst;      /// tally of votes countering proposal\n        mapping(address => bool) didCommit;   /// indicates whether an address committed a vote for this poll\n        mapping(address => bool) didReveal;   /// indicates whether an address revealed a vote for this poll\n        mapping(address => uint) voteOptions; /// stores the voteOption of an address that revealed\n    }\n\n    // ============\n    // STATE VARIABLES:\n    // ============\n\n    uint public pollNonce;\n    uint public INITIAL_POLL_NONCE;\n\n    mapping(uint => Poll) public pollMap; // maps pollID to Poll struct\n    mapping(address => uint) public voteTokenBalance; // maps user's address to voteToken balance\n\n    mapping(address => DLL.Data) dllMap;\n    AttributeStore.Data store;\n\n    address public token;\n\n    /**\n    @dev Initializer. Can only be called once.\n    @param _token The address where the ERC20 token contract is deployed\n    */\n    function initialize(address _token) initializer public {\n        // require(_token != address(0) && address(token) == address(0));\n        token = _token;\n        pollNonce = INITIAL_POLL_NONCE;\n    }\n\n    // ================\n    // TOKEN INTERFACE:\n    // ================\n\n    /**\n    @notice Loads _numTokens ERC20 tokens into the voting contract for one-to-one voting rights\n    @dev Assumes that msg.sender has approved voting contract to spend on their behalf\n    @param _numTokens The number of votingTokens desired in exchange for ERC20 tokens\n    */\n    function requestVotingRights(uint _numTokens) public {\n        require(SafeERC20.balanceOf(token, msg.sender) >= _numTokens, \"Not enough balance\");\n        voteTokenBalance[msg.sender] += _numTokens;\n        SafeERC20.transferFrom(token, msg.sender,  address(this), _numTokens);\n        emit _VotingRightsGranted(_numTokens, msg.sender);\n    }\n\n    /**\n    @notice Withdraw _numTokens ERC20 tokens from the voting contract, revoking these voting rights\n    @param _numTokens The number of ERC20 tokens desired in exchange for voting rights\n    */\n    function withdrawVotingRights(uint _numTokens) external {\n        uint availableTokens = voteTokenBalance[msg.sender].sub(getLockedTokens(msg.sender));\n        require(availableTokens >= _numTokens);\n        voteTokenBalance[msg.sender] -= _numTokens;\n        SafeERC20.transfer(token, msg.sender, _numTokens);\n        emit _VotingRightsWithdrawn(_numTokens, msg.sender);\n    }\n\n    /**\n    @dev Unlocks tokens locked in unrevealed vote where poll has ended\n    @param _pollID Integer identifier associated with the target poll\n    */\n    function rescueTokens(uint _pollID) public {\n        require(isExpired(pollMap[_pollID].revealEndDate), \"Not Expired\");\n        require(dllMap[msg.sender].contains(_pollID), \"Not in dll\");\n\n        dllMap[msg.sender].remove(_pollID);\n        emit _TokensRescued(_pollID, msg.sender);\n    }\n\n    /**\n    @dev Unlocks tokens locked in unrevealed votes where polls have ended\n    @param _pollIDs Array of integer identifiers associated with the target polls\n    */\n    function rescueTokensInMultiplePolls(uint[] memory _pollIDs) public {\n        // loop through arrays, rescuing tokens from all\n        for (uint i = 0; i < _pollIDs.length; i++) {\n            rescueTokens(_pollIDs[i]);\n        }\n    }\n\n    // =================\n    // VOTING INTERFACE:\n    // =================\n\n    /**\n    @notice Commits vote using hash of choice and secret salt to conceal vote until reveal\n    @param _pollID Integer identifier associated with target poll\n    @param _secretHash Commit keccak256 hash of voter's choice and salt (tightly packed in this order)\n    @param _numTokens The number of tokens to be committed towards the target poll\n    @param _prevPollID The ID of the poll that the user has voted the maximum number of tokens in which is still less than or equal to numTokens\n    */\n    function commitVote(uint _pollID, bytes32 _secretHash, uint _numTokens, uint _prevPollID) public {\n        require(commitPeriodActive(_pollID), \"commit period not active\");\n\n        // if msg.sender doesn't have enough voting rights,\n        // request for enough voting rights\n        if (voteTokenBalance[msg.sender] < _numTokens) {\n            uint remainder = _numTokens.sub(voteTokenBalance[msg.sender]);\n            requestVotingRights(remainder);\n        }\n\n        // make sure msg.sender has enough voting rights\n        require(voteTokenBalance[msg.sender] >= _numTokens, \"not enough votes\");\n        // prevent user from committing to zero node placeholder\n        require(_pollID != 0, \"no zero pollid\");\n        // prevent user from committing a secretHash of 0\n        require(_secretHash != 0, \"no secret 0\");\n\n        // Check if _prevPollID exists in the user's DLL or if _prevPollID is 0\n        require(_prevPollID == 0 || dllMap[msg.sender].contains(_prevPollID), \"previous poll id does not exist or is 0\");\n\n        uint nextPollID = dllMap[msg.sender].getNext(_prevPollID);\n\n        // edge case: in-place update\n        if (nextPollID == _pollID) {\n            nextPollID = dllMap[msg.sender].getNext(_pollID);\n        }\n\n        require(validPosition(_prevPollID, nextPollID, msg.sender, _numTokens), \"invalid position\");\n        dllMap[msg.sender].insert(_prevPollID, _pollID, nextPollID);\n\n        bytes32 UUID = attrUUID(msg.sender, _pollID);\n\n        store.setAttribute(UUID, \"numTokens\", _numTokens);\n        store.setAttribute(UUID, \"commitHash\", uint(_secretHash));\n\n        pollMap[_pollID].didCommit[msg.sender] = true;\n        emit _VoteCommitted(_pollID, _numTokens, msg.sender);\n    }\n\n    /**\n    @notice                 Commits votes using hashes of choices and secret salts to conceal votes until reveal\n    @param _pollIDs         Array of integer identifiers associated with target polls\n    @param _secretHashes    Array of commit keccak256 hashes of voter's choices and salts (tightly packed in this order)\n    @param _numsTokens      Array of numbers of tokens to be committed towards the target polls\n    @param _prevPollIDs     Array of IDs of the polls that the user has voted the maximum number of tokens in which is still less than or equal to numTokens\n    */\n    function commitVotes(uint[] memory _pollIDs, bytes32[] memory _secretHashes, uint[] memory _numsTokens, uint[] memory _prevPollIDs) public {\n        // make sure the array lengths are all the same\n        require(_pollIDs.length == _secretHashes.length);\n        require(_pollIDs.length == _numsTokens.length);\n        require(_pollIDs.length == _prevPollIDs.length);\n\n        // loop through arrays, committing each individual vote values\n        for (uint i = 0; i < _pollIDs.length; i++) {\n            commitVote(_pollIDs[i], _secretHashes[i], _numsTokens[i], _prevPollIDs[i]);\n        }\n    }\n\n    /**\n    @dev Compares previous and next poll's committed tokens for sorting purposes\n    @param _prevID Integer identifier associated with previous poll in sorted order\n    @param _nextID Integer identifier associated with next poll in sorted order\n    @param _voter Address of user to check DLL position for\n    @param _numTokens The number of tokens to be committed towards the poll (used for sorting)\n    @return valid Boolean indication of if the specified position maintains the sort\n    */\n    function validPosition(uint _prevID, uint _nextID, address _voter, uint _numTokens) public view returns (bool valid) {\n        bool prevValid = (_numTokens >= getNumTokens(_voter, _prevID));\n        // if next is zero node, _numTokens does not need to be greater\n        bool nextValid = (_numTokens <= getNumTokens(_voter, _nextID) || _nextID == 0);\n        return prevValid && nextValid;\n    }\n\n    /**\n    @notice Reveals vote with choice and secret salt used in generating commitHash to attribute committed tokens\n    @param _pollID Integer identifier associated with target poll\n    @param _voteOption Vote choice used to generate commitHash for associated poll\n    @param _salt Secret number used to generate commitHash for associated poll\n    */\n    function revealVote(uint _pollID, uint _voteOption, uint _salt) public {\n        // Make sure the reveal period is active\n        require(revealPeriodActive(_pollID), \"not active reveal period\");\n        require(pollMap[_pollID].didCommit[msg.sender],\"no commits by sender\");                         // make sure user has committed a vote for this poll\n        require(!pollMap[_pollID].didReveal[msg.sender], \"no reveals by sender\");                        // prevent user from revealing multiple times\n        require(keccak256(abi.encodePacked(_voteOption, _salt)) == getCommitHash(msg.sender, _pollID), \"commit hash mismatch\"); // compare resultant hash from inputs to original commitHash\n\n        uint numTokens = getNumTokens(msg.sender, _pollID);\n\n        if (_voteOption == 1) {// apply numTokens to appropriate poll choice\n            pollMap[_pollID].votesFor += numTokens;\n        } else {\n            pollMap[_pollID].votesAgainst += numTokens;\n        }\n\n        dllMap[msg.sender].remove(_pollID); // remove the node referring to this vote upon reveal\n        pollMap[_pollID].didReveal[msg.sender] = true;\n        pollMap[_pollID].voteOptions[msg.sender] = _voteOption;\n\n        emit _VoteRevealed(_pollID, numTokens, pollMap[_pollID].votesFor, pollMap[_pollID].votesAgainst, _voteOption, msg.sender, _salt);\n    }\n\n    /**\n    @notice             Reveals multiple votes with choices and secret salts used in generating commitHashes to attribute committed tokens\n    @param _pollIDs     Array of integer identifiers associated with target polls\n    @param _voteOptions Array of vote choices used to generate commitHashes for associated polls\n    @param _salts       Array of secret numbers used to generate commitHashes for associated polls\n    */\n    function revealVotes(uint[] memory _pollIDs, uint[] memory _voteOptions, uint[] memory _salts) public {\n        // make sure the array lengths are all the same\n        require(_pollIDs.length == _voteOptions.length);\n        require(_pollIDs.length == _salts.length);\n\n        // loop through arrays, revealing each individual vote values\n        for (uint i = 0; i < _pollIDs.length; i++) {\n            revealVote(_pollIDs[i], _voteOptions[i], _salts[i]);\n        }\n    }\n\n    /**\n    @param _voter           Address of voter who voted in the majority bloc\n    @param _pollID          Integer identifier associated with target poll\n    @return correctVotes    Number of tokens voted for winning option\n    */\n    function getNumPassingTokens(address _voter, uint _pollID) public view returns (uint correctVotes) {\n        require(pollEnded(_pollID), \"Poll not ended\");\n        require(pollMap[_pollID].didReveal[_voter], \"not revealed\");\n\n        uint winningChoice = isPassed(_pollID) ? 1 : 0;\n        uint voterVoteOption = pollMap[_pollID].voteOptions[_voter];\n\n        require(voterVoteOption == winningChoice, \"Voter revealed, but not in the majority\");\n\n        return getNumTokens(_voter, _pollID);\n    }\n\n    // ==================\n    // POLLING INTERFACE:\n    // ==================\n\n    /**\n    @dev Initiates a poll with canonical configured parameters at pollID emitted by PollCreated event\n    @param _voteQuorum Type of majority (out of 100) that is necessary for poll to be successful\n    @param _commitDuration Length of desired commit period in seconds\n    @param _revealDuration Length of desired reveal period in seconds\n    */\n    function startPoll(uint _voteQuorum, uint _commitDuration, uint _revealDuration) public returns (uint pollID) {\n        pollNonce = pollNonce + 1;\n\n        uint commitEndDate = block.timestamp.add(_commitDuration);\n        uint revealEndDate = commitEndDate.add(_revealDuration);\n\n        pollMap[pollNonce] = Poll({\n            voteQuorum: _voteQuorum,\n            commitEndDate: commitEndDate,\n            revealEndDate: revealEndDate,\n            votesFor: 0,\n            votesAgainst: 0\n        });\n\n        emit _PollCreated(_voteQuorum, commitEndDate, revealEndDate, pollNonce, msg.sender);\n        return pollNonce;\n    }\n\n    /**\n    @notice Determines if proposal has passed\n    @dev Check if votesFor out of totalVotes exceeds votesQuorum (requires pollEnded)\n    @param _pollID Integer identifier associated with target poll\n    */\n    function isPassed(uint _pollID) view public returns (bool passed) {\n        require(pollEnded(_pollID), \"Poll still open\");\n\n        Poll memory poll = pollMap[_pollID];\n        return (100 * poll.votesFor) > (poll.voteQuorum * (poll.votesFor + poll.votesAgainst));\n    }\n\n    // ----------------\n    // POLLING HELPERS:\n    // ----------------\n\n    /**\n    @dev Gets the total winning votes for reward distribution purposes\n    @param _pollID Integer identifier associated with target poll\n    @return Total number of votes committed to the winning option for specified poll\n    */\n    function getTotalNumberOfTokensForWinningOption(uint _pollID) view public returns (uint numTokens) {\n        require(pollEnded(_pollID), \"Poll still open\");\n\n        if (isPassed(_pollID))\n            return pollMap[_pollID].votesFor;\n        else\n            return pollMap[_pollID].votesAgainst;\n    }\n\n    function getTotalVotes(uint _pollID) view public returns (uint numTokens) {\n        require(pollEnded(_pollID), \"Poll still open\");\n\n        return pollMap[_pollID].votesFor + pollMap[_pollID].votesAgainst;\n    }\n    /**\n    @notice Determines if poll is over\n    @dev Checks isExpired for specified poll's revealEndDate\n    @return Boolean indication of whether polling period is over\n    */\n    function pollEnded(uint _pollID) view public returns (bool ended) {\n        require(pollExists(_pollID), \"poll does not exist\");\n\n        return isExpired(pollMap[_pollID].revealEndDate);\n    }\n\n    /**\n    @notice Checks if the commit period is still active for the specified poll\n    @dev Checks isExpired for the specified poll's commitEndDate\n    @param _pollID Integer identifier associated with target poll\n    @return Boolean indication of isCommitPeriodActive for target poll\n    */\n    function commitPeriodActive(uint _pollID) view public returns (bool active) {\n        require(pollExists(_pollID));\n\n        return !isExpired(pollMap[_pollID].commitEndDate);\n    }\n\n    /**\n    @notice Checks if the reveal period is still active for the specified poll\n    @dev Checks isExpired for the specified poll's revealEndDate\n    @param _pollID Integer identifier associated with target poll\n    */\n    function revealPeriodActive(uint _pollID) view public returns (bool active) {\n        require(pollExists(_pollID), \"non existent poll\");\n\n        return !isExpired(pollMap[_pollID].revealEndDate) && !commitPeriodActive(_pollID);\n    }\n\n    /**\n    @dev Checks if user has committed for specified poll\n    @param _voter Address of user to check against\n    @param _pollID Integer identifier associated with target poll\n    @return Boolean indication of whether user has committed\n    */\n    function didCommit(address _voter, uint _pollID) view public returns (bool committed) {\n        require(pollExists(_pollID));\n\n        return pollMap[_pollID].didCommit[_voter];\n    }\n\n    /**\n    @dev Checks if user has revealed for specified poll\n    @param _voter Address of user to check against\n    @param _pollID Integer identifier associated with target poll\n    @return Boolean indication of whether user has revealed\n    */\n    function didReveal(address _voter, uint _pollID) view public returns (bool revealed) {\n        require(pollExists(_pollID), \"no poll exist\");\n\n        return pollMap[_pollID].didReveal[_voter];\n    }\n\n    /**\n    @dev Checks if a poll exists\n    @param _pollID The pollID whose existance is to be evaluated.\n    @return Boolean Indicates whether a poll exists for the provided pollID\n    */\n    function pollExists(uint _pollID) view public returns (bool exists) {\n        return (_pollID != 0 && _pollID <= pollNonce);\n    }\n\n    // ---------------------------\n    // DOUBLE-LINKED-LIST HELPERS:\n    // ---------------------------\n\n    /**\n    @dev Gets the bytes32 commitHash property of target poll\n    @param _voter Address of user to check against\n    @param _pollID Integer identifier associated with target poll\n    @return Bytes32 hash property attached to target poll\n    */\n    function getCommitHash(address _voter, uint _pollID) view public returns (bytes32 commitHash) {\n        return bytes32(store.getAttribute(attrUUID(_voter, _pollID), \"commitHash\"));\n    }\n\n    /**\n    @dev Wrapper for getAttribute with attrName=\"numTokens\"\n    @param _voter Address of user to check against\n    @param _pollID Integer identifier associated with target poll\n    @return Number of tokens committed to poll in sorted poll-linked-list\n    */\n    function getNumTokens(address _voter, uint _pollID) view public returns (uint numTokens) {\n        return store.getAttribute(attrUUID(_voter, _pollID), \"numTokens\");\n    }\n\n    /**\n    @dev Gets top element of sorted poll-linked-list\n    @param _voter Address of user to check against\n    @return Integer identifier to poll with maximum number of tokens committed to it\n    */\n    function getLastNode(address _voter) view public returns (uint pollID) {\n        return dllMap[_voter].getPrev(0);\n    }\n\n    /**\n    @dev Gets the numTokens property of getLastNode\n    @param _voter Address of user to check against\n    @return Maximum number of tokens committed in poll specified\n    */\n    function getLockedTokens(address _voter) view public returns (uint numTokens) {\n        return getNumTokens(_voter, getLastNode(_voter));\n    }\n\n    /*\n    @dev Takes the last node in the user's DLL and iterates backwards through the list searching\n    for a node with a value less than or equal to the provided _numTokens value. When such a node\n    is found, if the provided _pollID matches the found nodeID, this operation is an in-place\n    update. In that case, return the previous node of the node being updated. Otherwise return the\n    first node that was found with a value less than or equal to the provided _numTokens.\n    @param _voter The voter whose DLL will be searched\n    @param _numTokens The value for the numTokens attribute in the node to be inserted\n    @return the node which the proposed node should be inserted after\n    */\n    function getInsertPointForNumTokens(address _voter, uint _numTokens, uint _pollID)\n    view public returns (uint prevNode) {\n        // Get the last node in the list and the number of tokens in that node\n        uint nodeID = getLastNode(_voter);\n        uint tokensInNode = getNumTokens(_voter, nodeID);\n\n        // Iterate backwards through the list until reaching the root node\n        while(nodeID != 0) {\n            // Get the number of tokens in the current node\n            tokensInNode = getNumTokens(_voter, nodeID);\n            if(tokensInNode <= _numTokens) { // We found the insert point!\n                if(nodeID == _pollID) {\n                    // This is an in-place update. Return the prev node of the node being updated\n                    nodeID = dllMap[_voter].getPrev(nodeID);\n                }\n                // Return the insert point\n                return nodeID; \n            }\n            // We did not find the insert point. Continue iterating backwards through the list\n            nodeID = dllMap[_voter].getPrev(nodeID);\n        }\n\n        // The list is empty, or a smaller value than anything else in the list is being inserted\n        return nodeID;\n    }\n\n    // ----------------\n    // GENERAL HELPERS:\n    // ----------------\n\n    /**\n    @dev Checks if an expiration date has been reached\n    @param _terminationDate Integer timestamp of date to compare current timestamp with\n    @return expired Boolean indication of whether the terminationDate has passed\n    */\n    function isExpired(uint _terminationDate) view public returns (bool expired) {\n        return (block.timestamp > _terminationDate);\n    }\n\n    /**\n    @dev Generates an identifier which associates a user and a poll together\n    @param _pollID Integer identifier associated with target poll\n    @return UUID Hash which is deterministic from _user and _pollID\n    */\n    function attrUUID(address _user, uint _pollID) public pure returns (bytes32 UUID) {\n        return keccak256(abi.encodePacked(_user, _pollID));\n    }\n}\n",
  "compiler": {
    "name": "solc",
    "version": "0.5.4+commit.9549d8ff.Emscripten.clang"
  },
  "networks": {
    "42": {
      "links": {},
      "events": {},
      "address": "0x210241f42bC94Eb9da7b4E0A841f3b340B569291",
      "updated_at": 1555544733930
    }
  },
  "schemaVersion": "3.0.6",
  "updatedAt": "2019-04-26T23:50:42.911Z",
  "devdoc": {
    "author": "Team: Aspyn Palatnick, Cem Ozer, Yorke Rhodes",
    "methods": {
      "attrUUID(address,uint256)": {
        "details": "Generates an identifier which associates a user and a poll together",
        "params": {
          "_pollID": "Integer identifier associated with target poll"
        },
        "return": "UUID Hash which is deterministic from _user and _pollID"
      },
      "commitPeriodActive(uint256)": {
        "details": "Checks isExpired for the specified poll's commitEndDate",
        "params": {
          "_pollID": "Integer identifier associated with target poll"
        },
        "return": "Boolean indication of isCommitPeriodActive for target poll"
      },
      "commitVote(uint256,bytes32,uint256,uint256)": {
        "params": {
          "_numTokens": "The number of tokens to be committed towards the target poll",
          "_pollID": "Integer identifier associated with target poll",
          "_prevPollID": "The ID of the poll that the user has voted the maximum number of tokens in which is still less than or equal to numTokens",
          "_secretHash": "Commit keccak256 hash of voter's choice and salt (tightly packed in this order)"
        }
      },
      "commitVotes(uint256[],bytes32[],uint256[],uint256[])": {
        "params": {
          "_numsTokens": "Array of numbers of tokens to be committed towards the target polls",
          "_pollIDs": "Array of integer identifiers associated with target polls",
          "_prevPollIDs": "Array of IDs of the polls that the user has voted the maximum number of tokens in which is still less than or equal to numTokens",
          "_secretHashes": "Array of commit keccak256 hashes of voter's choices and salts (tightly packed in this order)"
        }
      },
      "didCommit(address,uint256)": {
        "details": "Checks if user has committed for specified poll",
        "params": {
          "_pollID": "Integer identifier associated with target poll",
          "_voter": "Address of user to check against"
        },
        "return": "Boolean indication of whether user has committed"
      },
      "didReveal(address,uint256)": {
        "details": "Checks if user has revealed for specified poll",
        "params": {
          "_pollID": "Integer identifier associated with target poll",
          "_voter": "Address of user to check against"
        },
        "return": "Boolean indication of whether user has revealed"
      },
      "getCommitHash(address,uint256)": {
        "details": "Gets the bytes32 commitHash property of target poll",
        "params": {
          "_pollID": "Integer identifier associated with target poll",
          "_voter": "Address of user to check against"
        },
        "return": "Bytes32 hash property attached to target poll"
      },
      "getLastNode(address)": {
        "details": "Gets top element of sorted poll-linked-list",
        "params": {
          "_voter": "Address of user to check against"
        },
        "return": "Integer identifier to poll with maximum number of tokens committed to it"
      },
      "getLockedTokens(address)": {
        "details": "Gets the numTokens property of getLastNode",
        "params": {
          "_voter": "Address of user to check against"
        },
        "return": "Maximum number of tokens committed in poll specified"
      },
      "getNumPassingTokens(address,uint256)": {
        "params": {
          "_pollID": "Integer identifier associated with target poll",
          "_voter": "Address of voter who voted in the majority bloc"
        },
        "return": "correctVotes    Number of tokens voted for winning option"
      },
      "getNumTokens(address,uint256)": {
        "details": "Wrapper for getAttribute with attrName=\"numTokens\"",
        "params": {
          "_pollID": "Integer identifier associated with target poll",
          "_voter": "Address of user to check against"
        },
        "return": "Number of tokens committed to poll in sorted poll-linked-list"
      },
      "getTotalNumberOfTokensForWinningOption(uint256)": {
        "details": "Gets the total winning votes for reward distribution purposes",
        "params": {
          "_pollID": "Integer identifier associated with target poll"
        },
        "return": "Total number of votes committed to the winning option for specified poll"
      },
      "initialize(address)": {
        "details": "Initializer. Can only be called once.",
        "params": {
          "_token": "The address where the ERC20 token contract is deployed"
        }
      },
      "isExpired(uint256)": {
        "details": "Checks if an expiration date has been reached",
        "params": {
          "_terminationDate": "Integer timestamp of date to compare current timestamp with"
        },
        "return": "expired Boolean indication of whether the terminationDate has passed"
      },
      "isPassed(uint256)": {
        "details": "Check if votesFor out of totalVotes exceeds votesQuorum (requires pollEnded)",
        "params": {
          "_pollID": "Integer identifier associated with target poll"
        }
      },
      "pollEnded(uint256)": {
        "details": "Checks isExpired for specified poll's revealEndDate",
        "return": "Boolean indication of whether polling period is over"
      },
      "pollExists(uint256)": {
        "details": "Checks if a poll exists",
        "params": {
          "_pollID": "The pollID whose existance is to be evaluated."
        },
        "return": "Boolean Indicates whether a poll exists for the provided pollID"
      },
      "requestVotingRights(uint256)": {
        "details": "Assumes that msg.sender has approved voting contract to spend on their behalf",
        "params": {
          "_numTokens": "The number of votingTokens desired in exchange for ERC20 tokens"
        }
      },
      "rescueTokens(uint256)": {
        "details": "Unlocks tokens locked in unrevealed vote where poll has ended",
        "params": {
          "_pollID": "Integer identifier associated with the target poll"
        }
      },
      "rescueTokensInMultiplePolls(uint256[])": {
        "details": "Unlocks tokens locked in unrevealed votes where polls have ended",
        "params": {
          "_pollIDs": "Array of integer identifiers associated with the target polls"
        }
      },
      "revealPeriodActive(uint256)": {
        "details": "Checks isExpired for the specified poll's revealEndDate",
        "params": {
          "_pollID": "Integer identifier associated with target poll"
        }
      },
      "revealVote(uint256,uint256,uint256)": {
        "params": {
          "_pollID": "Integer identifier associated with target poll",
          "_salt": "Secret number used to generate commitHash for associated poll",
          "_voteOption": "Vote choice used to generate commitHash for associated poll"
        }
      },
      "revealVotes(uint256[],uint256[],uint256[])": {
        "params": {
          "_pollIDs": "Array of integer identifiers associated with target polls",
          "_salts": "Array of secret numbers used to generate commitHashes for associated polls",
          "_voteOptions": "Array of vote choices used to generate commitHashes for associated polls"
        }
      },
      "startPoll(uint256,uint256,uint256)": {
        "details": "Initiates a poll with canonical configured parameters at pollID emitted by PollCreated event",
        "params": {
          "_commitDuration": "Length of desired commit period in seconds",
          "_revealDuration": "Length of desired reveal period in seconds",
          "_voteQuorum": "Type of majority (out of 100) that is necessary for poll to be successful"
        }
      },
      "validPosition(uint256,uint256,address,uint256)": {
        "details": "Compares previous and next poll's committed tokens for sorting purposes",
        "params": {
          "_nextID": "Integer identifier associated with next poll in sorted order",
          "_numTokens": "The number of tokens to be committed towards the poll (used for sorting)",
          "_prevID": "Integer identifier associated with previous poll in sorted order",
          "_voter": "Address of user to check DLL position for"
        },
        "return": "valid Boolean indication of if the specified position maintains the sort"
      },
      "withdrawVotingRights(uint256)": {
        "params": {
          "_numTokens": "The number of ERC20 tokens desired in exchange for voting rights"
        }
      }
    },
    "title": "Partial-Lock-Commit-Reveal Voting scheme with ERC20 tokens"
  },
  "userdoc": {
    "methods": {
      "commitPeriodActive(uint256)": {
        "notice": "Checks if the commit period is still active for the specified poll"
      },
      "commitVote(uint256,bytes32,uint256,uint256)": {
        "notice": "Commits vote using hash of choice and secret salt to conceal vote until reveal"
      },
      "commitVotes(uint256[],bytes32[],uint256[],uint256[])": {
        "notice": "Commits votes using hashes of choices and secret salts to conceal votes until reveal"
      },
      "isPassed(uint256)": {
        "notice": "Determines if proposal has passed"
      },
      "pollEnded(uint256)": {
        "notice": "Determines if poll is over"
      },
      "requestVotingRights(uint256)": {
        "notice": "Loads _numTokens ERC20 tokens into the voting contract for one-to-one voting rights"
      },
      "revealPeriodActive(uint256)": {
        "notice": "Checks if the reveal period is still active for the specified poll"
      },
      "revealVote(uint256,uint256,uint256)": {
        "notice": "Reveals vote with choice and secret salt used in generating commitHash to attribute committed tokens"
      },
      "revealVotes(uint256[],uint256[],uint256[])": {
        "notice": "Reveals multiple votes with choices and secret salts used in generating commitHashes to attribute committed tokens"
      },
      "withdrawVotingRights(uint256)": {
        "notice": "Withdraw _numTokens ERC20 tokens from the voting contract, revoking these voting rights"
      }
    }
  }
}